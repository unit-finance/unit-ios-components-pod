// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UNComponents
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
import RxCocoa
import RxSwift
import SafariServices
import Swift
import UIKit
@_exported import UNComponents
import WebKit
import _Concurrency
import _StringProcessing
public enum UNCardComponentCallback {
  case cardStatusChanged(card: UNComponents.UNCardData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNCardData, UNComponents.UNError>)
}
public typealias UNCardComponentCallbacks = (_ callback: UNComponents.UNCardComponentCallback) -> Swift.Void
public enum UNACHCreditComponentCallback {
  case onPaymentCreated(data: UNComponents.UNACHData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNACHCareditOnLoadResponse, UNComponents.UNError>)
}
public struct UNCounterpartyAccountData : Swift.Decodable {
  public let type: Swift.String
  public let id: Swift.String
  public let attributes: UNComponents.UNCounterpartyAccountAttributes
  public let relationships: UNComponents.UNAccountRelationships
  public init(from decoder: Swift.Decoder) throws
}
public struct UNCounterpartyAccountAttributes : Swift.Decodable {
  public let createdAt: Swift.String
  public let updatedAt: Swift.String?
  public let name: Swift.String
  public let routingNumber: Swift.String?
  public let accountNumber: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNActivityView : UIKit.UIView {
  var accountId: Swift.String { get set }
}
public enum UNAccountComponentCallback {
  case unitOnLoad(result: Swift.Result<[UNComponents.UNAccountData], UNComponents.UNError>)
  case onAccountChange(account: UNComponents.UNAccountData)
}
public enum UNError : Swift.Error {
  case onLoad(errors: [UNComponents.UNErrorResponse])
  case missingCustomerToken
  case missingEnviorment
}
public struct UNACHData : Swift.Decodable {
  public let type: Swift.String
  public let id: Swift.String
  public let details: UNComponents.UNACHAttributes
  public let relationships: UNComponents.UNACHRelationships
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHCareditOnLoadResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHAttributes : Swift.Decodable {
  public let createdAt: Swift.String
  public let status: UNComponents.UNPaymentStatus
  public let settlementDate: Swift.String?
  public let reason: Swift.String?
  public let direction: UNComponents.UNDirection
  public let description: Swift.String
  public let transactionSummaryOverride: Swift.String?
  public let amount: Swift.Int
  public let tags: UNComponents.UNTags?
  public let addenda: Swift.String?
  public let counterparty: UNComponents.UNAchCounterparty
  public let expectedCompletionDate: Swift.String?
  public let counterpartyVerificationMethod: UNComponents.UNCounterpartyVerificationMethod?
  public let sameDay: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
public struct UNAchCounterparty : Swift.Decodable {
  public let name: Swift.String
  public let accountNumber: Swift.String
  public let routingNumber: Swift.String
  public let accountType: UNComponents.UNPaymentAccountType
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHRelationships : Swift.Decodable {
  public let account: UNComponents.UNRelationshipData?
  public let customer: UNComponents.UNRelationshipData?
  public let customers: UNComponents.UNRelationshipDataArray
  public let transaction: UNComponents.UNRelationshipData?
  public let counterparty: UNComponents.UNRelationshipData?
  public let recurringPayment: UNComponents.UNRelationshipData?
  public let org: UNComponents.UNRelationshipData?
  public init(from decoder: Swift.Decoder) throws
}
public class UNACHCreditViewSettingsBuilder : UNComponents.UNACHCreditViewSettingsProtocol {
  public var fee: Swift.Double? {
    get
  }
  public var isAutoFocus: Swift.Bool {
    get
  }
  public init(fee: Swift.Double? = nil, isAutoFocus: Swift.Bool = false)
  public func fee(_ fee: Swift.Double) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  @objc deinit
}
public protocol UNACHCreditView : UIKit.UIView {
  var accountId: Swift.String { get set }
}
public protocol UNACHCreditViewSettingsProtocol {
  var fee: Swift.Double? { get }
  var isAutoFocus: Swift.Bool { get }
}
public typealias UNAccountComponentCallbacks = (_ callback: UNComponents.UNAccountComponentCallback) -> Swift.Void
public enum UNActivityComponentCallback {
  case unitOnLoad(result: Swift.Result<Swift.Void, UNComponents.UNError>)
}
@objc @_Concurrency.MainActor(unsafe) public class UNActivityComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(accountId: Swift.String, theme: UNComponents.UNTheme?, callbacks: UNComponents.UNActivityComponentCallbacks?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UNComponents.UNActivityComponent : UNComponents.UNActivityView {
  @_Concurrency.MainActor(unsafe) public var accountId: Swift.String {
    get
    set(newAccountId)
  }
}
public struct UNCardData : Swift.Decodable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNCardDetails
  public init(from decoder: Swift.Decoder) throws
}
public struct UNCardDetails : Swift.Decodable {
  public let createdAt: Swift.String
  public let last4Digits: Swift.String
  public let expirationDate: Swift.String
  public let status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public enum UNCardType : Swift.String, Swift.Decodable {
  case individualDebitCard
  case businessDebitCard
  case individualVirtualDebitCard
  case businessVirtualDebitCard
  public var isVirtual: Swift.Bool {
    get
  }
  public var typeDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UNManagerProtocol : AnyObject {
  var customerToken: UNComponents.UNCustomerToken { get set }
  var environment: UNComponents.UNEnvironment { get set }
  var ui: UNComponents.UNUI { get }
}
public protocol UNUIViews {
  func getCardComponent(id: Swift.String, additionalSettings: UNComponents.UNCardViewSettingsProtocol?, theme: UNComponents.UNTheme?, callbacks: UNComponents.UNCardComponentCallbacks?) -> UNComponents.UNCardView
  func getACHCreditComponent(accountId: Swift.String, additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol?, theme: UNComponents.UNTheme?, callbacks: UNComponents.UNACHCreditComponentCallbacks?) -> UNComponents.UNACHCreditView
  func getActivityComponent(accountId: Swift.String, theme: UNComponents.UNTheme?, callbacks: UNComponents.UNActivityComponentCallbacks?) -> UNComponents.UNActivityView
  func getAccountComponent(accountId: Swift.String, theme: UNComponents.UNTheme?, callbacks: UNComponents.UNAccountComponentCallbacks?) -> UNComponents.UNAccountView
}
extension UNComponents.UNUIViews {
  public func getCardComponent(id: Swift.String, additionalSettings: UNComponents.UNCardViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, callbacks: UNComponents.UNCardComponentCallbacks? = nil) -> UNComponents.UNCardView
  public func getACHCreditComponent(accountId: Swift.String, additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, callbacks: UNComponents.UNACHCreditComponentCallbacks? = nil) -> UNComponents.UNACHCreditView
  public func getActivityComponent(accountId: Swift.String, theme: UNComponents.UNTheme? = nil, callbacks: UNComponents.UNActivityComponentCallbacks? = nil) -> UNComponents.UNActivityView
  public func getAccountComponent(accountId: Swift.String, theme: UNComponents.UNTheme? = nil, callbacks: UNComponents.UNAccountComponentCallbacks? = nil) -> UNComponents.UNAccountView
}
public class UNCardViewSettingsBuilder : UNComponents.UNCardViewSettingsProtocol {
  public var hideActionsMenuButton: Swift.Bool {
    get
  }
  public var hideCardTitle: Swift.Bool {
    get
  }
  public var hideSensitiveDataButton: Swift.Bool {
    get
  }
  public init(hideActionsMenuButton: Swift.Bool = false, hideCardTitle: Swift.Bool = false, hideSensitiveDataButton: Swift.Bool = false)
  public func hideActionsMenuButton(_ hideActionsMenuButton: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func hideCardTitle(_ hideCardTitle: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func hideSensitiveDataButton(_ hideSensitiveDataButton: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  @objc deinit
}
public enum UNPaymentStatus : Swift.String, Swift.Decodable {
  case sent
  case rejected
  case pending
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNDirection : Swift.String, Swift.Decodable {
  case debit
  case credit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNPaymentAccountType : Swift.String, Swift.Decodable {
  case savings
  case checking
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCounterpartyVerificationMethod : Swift.String, Swift.Decodable {
  case plaid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias UNBookPaymentComponentCallbacks = (_ callback: UNComponents.UNBookPaymentComponentCallback) -> Swift.Void
public enum UNBookPaymentComponentCallback {
  case complete(result: Swift.Result<Swift.Void, UNComponents.UNBookPaymentError>)
}
public enum UNBookPaymentError : Foundation.LocalizedError {
  case wrongDetails
  case insufficientFunds
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: UNComponents.UNBookPaymentError, b: UNComponents.UNBookPaymentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class UNBookPaymentComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(customerToken: Swift.String, senderCustomerId: Swift.String, senderAccountId: Swift.String? = nil, recipientCustomerId: Swift.String, recipientAccountId: Swift.String? = nil, callbacks: @escaping UNComponents.UNBookPaymentComponentCallbacks)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias UNActivityComponentCallbacks = (_ callback: UNComponents.UNActivityComponentCallback) -> Swift.Void
public struct UNAccountData : Swift.Decodable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNAccountAttributes
  public let relationships: UNComponents.UNAccountRelationships
  public init(from decoder: Swift.Decoder) throws
}
public enum UNAccountType : Swift.String, Swift.Decodable {
  case depositAccount
  case batchAccount
  case creditAccount
  case orgLoanAccount
  case orgGeneralLedgerAccount
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNAccountAttributes : Swift.Decodable {
  public let createdAt: Swift.String
  public let updatedAt: Swift.String?
  public let name: Swift.String
  public let creditTerms: Swift.String?
  public let depositProduct: Swift.String?
  public let routingNumber: Swift.String?
  public let accountNumber: Swift.String?
  public let maskedAccountNumber: Swift.String?
  public let secondaryAccountNumber: UNComponents.UNSecondaryAccountNumber?
  public let creditLimit: Swift.Double?
  public let tags: UNComponents.UNTags
  public let balance: Swift.Double
  public let hold: Swift.Double
  public let reserve: Swift.Double?
  public let available: Swift.Double
  public let overdraftLimit: Swift.Double?
  public let currency: Swift.String
  public let status: UNComponents.UNAccountStatus
  public let closeReason: Swift.String?
  public let fraudReason: UNComponents.UNFraudReason?
  public let closeReasonText: Swift.String?
  public let freezeReason: Swift.String?
  public let isOverdrawnWithinLimit: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
public struct UNSecondaryAccountNumber : Swift.Decodable {
  public let routingNumber: Swift.String
  public let accountNumber: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct UNAccountRelationships : Swift.Decodable {
  public let customer: UNComponents.UNRelationshipData?
  public let customers: UNComponents.UNRelationshipDataArray?
  public let org: UNComponents.UNRelationshipData?
  public init(from decoder: Swift.Decoder) throws
}
public enum UNFraudReason : Swift.String, Swift.Decodable {
  case achActivity
  case cardActivity
  case checkActivity
  case applicationHistory
  case accountActivity
  case clientIdentified
  case identityTheft
  case linkedToFraudulentCustomer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNAccountStatus : Swift.String, Swift.Decodable {
  case closed
  case open
  case frozen
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias UNCustomerToken = Swift.String
public typealias UNTheme = Swift.String
public typealias UNACHCreditComponentCallbacks = (_ callback: UNComponents.UNACHCreditComponentCallback) -> Swift.Void
public struct UNRelationshipData : Swift.Decodable {
  public let data: UNComponents.UNData
  public init(from decoder: Swift.Decoder) throws
}
public struct UNRelationshipDataArray : Swift.Decodable {
  public let data: [UNComponents.UNData]
  public init(from decoder: Swift.Decoder) throws
}
public struct UNData : Swift.Decodable {
  public let type: Swift.String
  public let id: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct UNTags : Swift.Decodable {
  public let dictionary: [Swift.String : Swift.String]
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNAccountView : UIKit.UIView {
  var accountId: Swift.String { get set }
}
public enum UNEnvironment {
  case sandbox
  case production
  public static func == (a: UNComponents.UNEnvironment, b: UNComponents.UNEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class UNACHCreditComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(accountId: Swift.String, additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol, theme: UNComponents.UNTheme?, callbacks: UNComponents.UNACHCreditComponentCallbacks?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UNComponents.UNACHCreditComponent : UNComponents.UNACHCreditView {
  @_Concurrency.MainActor(unsafe) public var accountId: Swift.String {
    get
    set(newAccountId)
  }
}
public struct UNComponentResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct UNComponentArrayResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct UNErrorResponse : Swift.Codable {
  public let status: Swift.String
  public let title: Swift.String
  public let detail: Swift.String?
  public let details: Swift.String?
  public let meta: UNComponents.UNErrorResponse.Meta?
  public struct Meta : Swift.Codable {
    public let supportId: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNUI {
  func setTheme(_ theme: UNComponents.UNTheme?)
  var views: UNComponents.UNUIViews { get }
  var theme: UNComponents.UNTheme? { get }
}
@_hasMissingDesignatedInitializers public class UnitSDK {
  public static let manager: UNComponents.UNManagerProtocol
  @objc deinit
}
public protocol UNCardView : UIKit.UIView {
  var cardId: Swift.String { get set }
}
public protocol UNCardViewSettingsProtocol {
  var hideActionsMenuButton: Swift.Bool { get }
  var hideCardTitle: Swift.Bool { get }
  var hideSensitiveDataButton: Swift.Bool { get }
}
extension UNComponents.UNCardType : Swift.Equatable {}
extension UNComponents.UNCardType : Swift.Hashable {}
extension UNComponents.UNCardType : Swift.RawRepresentable {}
extension UNComponents.UNPaymentStatus : Swift.Equatable {}
extension UNComponents.UNPaymentStatus : Swift.Hashable {}
extension UNComponents.UNPaymentStatus : Swift.RawRepresentable {}
extension UNComponents.UNDirection : Swift.Equatable {}
extension UNComponents.UNDirection : Swift.Hashable {}
extension UNComponents.UNDirection : Swift.RawRepresentable {}
extension UNComponents.UNPaymentAccountType : Swift.Equatable {}
extension UNComponents.UNPaymentAccountType : Swift.Hashable {}
extension UNComponents.UNPaymentAccountType : Swift.RawRepresentable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.Equatable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.Hashable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.RawRepresentable {}
extension UNComponents.UNBookPaymentError : Swift.Equatable {}
extension UNComponents.UNBookPaymentError : Swift.Hashable {}
extension UNComponents.UNAccountType : Swift.Equatable {}
extension UNComponents.UNAccountType : Swift.Hashable {}
extension UNComponents.UNAccountType : Swift.RawRepresentable {}
extension UNComponents.UNFraudReason : Swift.Equatable {}
extension UNComponents.UNFraudReason : Swift.Hashable {}
extension UNComponents.UNFraudReason : Swift.RawRepresentable {}
extension UNComponents.UNAccountStatus : Swift.Equatable {}
extension UNComponents.UNAccountStatus : Swift.Hashable {}
extension UNComponents.UNAccountStatus : Swift.RawRepresentable {}
extension UNComponents.UNEnvironment : Swift.Equatable {}
extension UNComponents.UNEnvironment : Swift.Hashable {}
