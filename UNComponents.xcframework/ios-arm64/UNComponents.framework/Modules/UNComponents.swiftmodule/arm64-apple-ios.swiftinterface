// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name UNComponents
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import DeveloperToolsSupport
import Dispatch
import Foundation
import MobileCoreServices
import PassKit
import SafariServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import UNComponents
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum UNCardComponentCallback {
  case cardStatusChanged(card: UNComponents.UNCard)
  case cardActivated(card: UNComponents.UNCard)
  case unitOnLoad(result: Swift.Result<UNComponents.UNCard, UNComponents.UNComponentsError>)
}
public enum UNCardComponentMenuItems : Swift.String {
  case freeze
  case addToWallet
  case managePin
  case replace
  case report
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCardMenuAction : Swift.String {
  case freeze
  case managePin
  case replace
  case report
  case close
  case activate
  case unfreeze
  case changePin
  case setPin
  case addToWallet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNFeeReversal : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNFeeReversal.Attributes
  public let relationships: UNComponents.UNFeeReversal.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNFeeReversal.Relationships.Account
    public let customer: UNComponents.UNFeeReversal.Relationships.Customer?
    public let customers: UNComponents.UNFeeReversal.Relationships.Customers?
    public let relatedTransaction: UNComponents.UNFeeReversal.Relationships.RelatedTransaction
    public let org: UNComponents.UNFeeReversal.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNFeeReversal.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNFeeReversal.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNFeeReversal.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RelatedTransaction : Swift.Codable {
      public let data: UNComponents.UNFeeReversal.Relationships.RelatedTransaction.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNFeeReversal.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNCreateCardView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var additionalSettings: any UNComponents.UNCreateCardViewSettingsProtocol { get set }
}
public protocol UNCreateCardViewSettingsProtocol {
  var cardTypes: [UNComponents.UNCreateCardType]? { get }
  var virtualCardFee: Swift.Double? { get }
  var physicalCardFee: Swift.Double? { get }
}
public enum UNActivityType : Swift.String, Swift.Codable {
  case Transaction
  case Authorization
  case CheckDeposit
  case AchPayment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias UNCardComponentCallbacks = (_ callback: UNComponents.UNCardComponentCallback) -> Swift.Void
public enum UNACHCreditComponentCallback {
  case onPaymentCreated(data: UNComponents.UNAchPayment)
  case onInitialStageBackButtonClicked
  case onFinalStageDoneButtonClicked
  case unitOnLoad(result: Swift.Result<UNComponents.UNACHCreditOnLoadResponse, UNComponents.UNComponentsError>)
}
public struct UNCounterparty : Swift.Codable {
  public let id: Swift.String
  public let attributes: UNComponents.UNCounterparty.Attributes
  public let relationships: UNComponents.UNCounterparty.Relationships
  public struct Attributes : Swift.Codable {
    public let name: Swift.String
    public let bank: Swift.String?
    public let routingNumber: Swift.String
    public let accountNumber: Swift.String
    public let accountType: UNComponents.UNCounterpartyAccountType
    public let type: UNComponents.UNCounterpartyType
    public let permissions: UNComponents.UNCounterpartyPermission
    public let createdAt: Swift.String
    public let tags: [Swift.String : Swift.String]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let customer: UNComponents.UNCounterparty.Relationships.Customer
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCounterparty.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCounterpartyPermission : Swift.String, Swift.Codable {
  case creditOnly
  case creditAndDebit
  case debitOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCounterpartyAccountType : Swift.String, Swift.Codable {
  case checking
  case savings
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCounterpartyType : Swift.String, Swift.Codable {
  case business
  case person
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNConnectedAccount : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public let attributes: UNComponents.UNConnectedAccount.Attributes
  public let relationships: UNComponents.UNConnectedAccount.Relationships
  public struct Attributes : Swift.Codable {
    public let mask: Swift.String
    public let name: Swift.String
    public let type: Swift.String
    public let subType: Swift.String
    public let createdAt: Swift.String
    public let updatedAt: Swift.String
    public let status: UNComponents.UNConnectedAccountStatus
    public let connectionType: UNComponents.UNConnectionAccountType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let customer: UNComponents.UNConnectedAccount.Relationships.Customer
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNConnectedAccount.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNConnectedAccountStatus : Swift.String, Swift.Codable {
  case pending
  case failed
  case verified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNConnectionAccountType : Swift.String, Swift.Codable {
  case sameDayMicroDeposit
  case instant
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNCustomerRepaymentReturned : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNCustomerRepaymentReturned.Attributes
  public let relationships: UNComponents.UNCustomerRepaymentReturned.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNCustomerRepaymentReturned.Relationships.Account
    public let customer: UNComponents.UNCustomerRepaymentReturned.Relationships.Customer?
    public let customers: UNComponents.UNCustomerRepaymentReturned.Relationships.Customers?
    public let org: UNComponents.UNCustomerRepaymentReturned.Relationships.Org?
    public let payment: UNComponents.UNCustomerRepaymentReturned.Relationships.Payment?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNCustomerRepaymentReturned.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCustomerRepaymentReturned.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNCustomerRepaymentReturned.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCustomerRepaymentReturned.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Payment : Swift.Codable {
      public let data: UNComponents.UNCustomerRepaymentReturned.Relationships.Payment.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNComponentsSDKConfigurationProtocol : AnyObject {
  var environment: UNComponents.UNComponentsEnvironment { get }
  var webVersioningStrategy: UNComponents.UNWebVersioningStrategy { get }
}
public protocol UNActivityView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var additionalSettings: any UNComponents.UNActivityViewSettingsProtocol { get set }
  func refresh()
}
public protocol UNActivityViewSettingsProtocol {
  var hideFilterButton: Swift.Bool { get }
  var hideTitle: Swift.Bool { get }
  var hideBackToTop: Swift.Bool { get }
  var queryFilter: Swift.String? { get }
  var paginationType: UNComponents.UNActivityComponentPaginationType { get }
  var transactionsPerPage: Swift.Int? { get }
}
public protocol UNComponentsServices {
  func setVisaProvider(_ provider: any UNComponents.UNVisaProviding)
}
public enum UNAccountComponentCallback {
  case unitOnLoad(result: Swift.Result<[UNComponents.UNAccount], UNComponents.UNComponentsError>)
  case onAccountChange(account: UNComponents.UNAccount)
  case onRequestLeftToSpendDetails(account: UNComponents.UNAccount)
}
public enum UNAccountComponentMenuItems : Swift.String {
  case details
  case statements
  case bankVerification
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNAccountStatusPosition : Swift.String {
  case start
  case end
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNReturnedReceivedAch : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNReturnedReceivedAch.Attributes
  public let relationships: UNComponents.UNReturnedReceivedAch.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let companyName: Swift.String
    public let counterpartyName: Swift.String
    public let counterpartyRoutingNumber: Swift.String
    public let reason: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNReturnedReceivedAch.Relationships.Account
    public let customer: UNComponents.UNReturnedReceivedAch.Relationships.Customer?
    public let customers: UNComponents.UNReturnedReceivedAch.Relationships.Customers?
    public let org: UNComponents.UNReturnedReceivedAch.Relationships.Org?
    public let returned: UNComponents.UNReturnedReceivedAch.Relationships.Returned
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNReturnedReceivedAch.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNReturnedReceivedAch.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNReturnedReceivedAch.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNReturnedReceivedAch.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Returned : Swift.Codable {
      public let data: UNComponents.UNReturnedReceivedAch.Relationships.Returned.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNInterestShare : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNInterestShare.Attributes
  public let relationships: UNComponents.UNInterestShare.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNInterestShare.Relationships.Account
    public let customer: UNComponents.UNInterestShare.Relationships.Customer?
    public let customers: UNComponents.UNInterestShare.Relationships.Customers?
    public let org: UNComponents.UNInterestShare.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNInterestShare.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNInterestShare.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNInterestShare.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNInterestShare.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNInterchangeShare : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNInterchangeShare.Attributes
  public let relationships: UNComponents.UNInterchangeShare.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNInterchangeShare.Relationships.Account
    public let customer: UNComponents.UNInterchangeShare.Relationships.Customer?
    public let customers: UNComponents.UNInterchangeShare.Relationships.Customers?
    public let org: UNComponents.UNInterchangeShare.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNInterchangeShare.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNInterchangeShare.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNInterchangeShare.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNInterchangeShare.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class UNAccountViewSettingsBuilder : UNComponents.UNAccountViewSettingsProtocol {
  public var hideActionsMenuButton: Swift.Bool {
    get
  }
  public var hideSelectionMenuButton: Swift.Bool {
    get
  }
  public var menuItems: [UNComponents.UNAccountComponentMenuItems]? {
    get
  }
  public var showLeftToSpend: Swift.Bool {
    get
  }
  public var hideAccountStatus: Swift.Bool {
    get
  }
  public var hideAccountDetails: Swift.Bool {
    get
  }
  public var hideAccountCtaBanner: Swift.Bool {
    get
  }
  public var hideAccountButtons: Swift.Bool {
    get
  }
  public var enableFundAccountButton: Swift.Bool {
    get
  }
  public var enablePaySomeoneAccountButton: Swift.Bool {
    get
  }
  public var accountStatusPosition: UNComponents.UNAccountStatusPosition? {
    get
  }
  public init(hideActionsMenuButton: Swift.Bool = false, hideSelectionMenuButton: Swift.Bool = false, menuItems: [UNComponents.UNAccountComponentMenuItems]? = nil, showLeftToSpend: Swift.Bool = false, hideAccountStatus: Swift.Bool = false, hideAccountDetails: Swift.Bool = false, hideAccountCtaBanner: Swift.Bool = false, hideAccountButtons: Swift.Bool = false, enableFundAccountButton: Swift.Bool = true, enablePaySomeoneAccountButton: Swift.Bool = true, accountStatusPosition: UNComponents.UNAccountStatusPosition? = nil)
  public func hideActionsMenuButton(_ hideActionsMenuButton: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func hideSelectionMenuButton(_ hideSelectionMenuButton: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func menuItems(_ menuItems: [UNComponents.UNAccountComponentMenuItems]) -> UNComponents.UNAccountViewSettingsBuilder
  public func showLeftToSpend(_ showLeftToSpend: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func hideAccountStatus(_ hideAccountStatus: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func hideAccountDetails(_ hideAccountDetails: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func hideAccountCtaBanner(_ hideAccountCtaBanner: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func hideAccountButtons(_ hideAccountButtons: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func enableFundAccountButton(_ enableFundAccountButton: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func enablePaySomeoneAccountButton(_ enablePaySomeoneAccountButton: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func accountStatusPosition(_ accountStatusPosition: UNComponents.UNAccountStatusPosition?) -> UNComponents.UNAccountViewSettingsBuilder
  @objc deinit
}
public enum UNMultipleCardsComponentCallback {
  case unitOnLoad(result: Swift.Result<[UNComponents.UNCard], UNComponents.UNComponentsError>)
  case cardClicked(card: UNComponents.UNCard)
}
public enum UNMultipleCardsComponentPaginationType : Swift.String {
  case infiniteScroll
  case pagination
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNCashDepositTransaction : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNCashDepositTransaction.Attributes
  public let relationships: UNComponents.UNCashDepositTransaction.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNCashDepositTransaction.Relationships.Account
    public let customer: UNComponents.UNCashDepositTransaction.Relationships.Customer?
    public let customers: UNComponents.UNCashDepositTransaction.Relationships.Customers?
    public let org: UNComponents.UNCashDepositTransaction.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNCashDepositTransaction.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCashDepositTransaction.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNCashDepositTransaction.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCashDepositTransaction.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNComponentsHelpers {
  func setRedirectUri(_ redirectUri: Swift.String)
  var redirectUri: Swift.String? { get }
  var unitSessionId: Swift.String { get }
}
public struct UNNegativeBalanceCoverage : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNNegativeBalanceCoverage.Attributes
  public let relationships: UNComponents.UNNegativeBalanceCoverage.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNNegativeBalanceCoverage.Relationships.Account
    public let customer: UNComponents.UNNegativeBalanceCoverage.Relationships.Customer?
    public let customers: UNComponents.UNNegativeBalanceCoverage.Relationships.Customers?
    public let org: UNComponents.UNNegativeBalanceCoverage.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNNegativeBalanceCoverage.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNNegativeBalanceCoverage.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNNegativeBalanceCoverage.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNNegativeBalanceCoverage.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNComponentsError : Swift.Error {
  case onLoad(errors: [UNComponents.UNComponentsErrorResponse])
  case missingCustomerToken
  case notInitialized
  case missingVisaProvider
  case jailbrokeDevice
  public var description: Swift.String {
    get
  }
}
public typealias UNMultipleCardsComponentCallbacks = (_ callback: UNComponents.UNMultipleCardsComponentCallback) -> Swift.Void
public class UNACHDebitViewSettingsBuilder : UNComponents.UNACHDebitViewSettingsProtocol {
  public var fee: Swift.Double? {
    get
  }
  public var isAutoFocus: Swift.Bool {
    get
  }
  public var initialStageBackButton: Swift.Bool {
    get
  }
  public var finalStageDoneButton: Swift.Bool {
    get
  }
  public var sameDay: Swift.Bool {
    get
  }
  public var plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]? {
    get
  }
  public var plaidLinkCustomizationName: Swift.String? {
    get
  }
  public var showSameDaySelection: Swift.Bool {
    get
  }
  public init(fee: Swift.Double? = nil, isAutoFocus: Swift.Bool = false, plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]? = nil, plaidLinkCustomizationName: Swift.String? = nil, sameDay: Swift.Bool = false, initialStageBackButton: Swift.Bool = false, finalStageDoneButton: Swift.Bool = false, showSameDaySelection: Swift.Bool = false)
  public func fee(_ fee: Swift.Double) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func sameDay(_ sameDay: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func plaidAccountFilters(_ plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func plaidLinkCustomizationName(_ plaidLinkCustomizationName: Swift.String) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func initialStageBackButton(_ initialStageBackButton: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func finalStageDoneButton(_ finalStageDoneButton: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func showSameDaySelection(_ showSameDaySelection: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  @objc deinit
}
public struct UNCheckDepositTransaction : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNCheckDepositTransactionAttributes
  public let relationships: UNComponents.UNCheckDepositRelationships
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCheckDepositTransactionAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let amount: UNComponents.UNCents
  public let direction: UNComponents.UNDirection
  public let balance: UNComponents.UNCents
  public let summary: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCheckDepositRelationships : Swift.Codable {
  public let account: UNComponents.UNTransactionRelationship
  public let customer: UNComponents.UNTransactionRelationship?
  public let customers: UNComponents.UNTransactionCustomerRelationships?
  public let org: UNComponents.UNTransactionRelationship?
  public let checkDeposit: UNComponents.UNTransactionRelationship?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNTransactionRelationship : Swift.Codable {
  public let data: UNComponents.UNTransactionRelationshipData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNTransactionRelationshipData : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNTransactionCustomerRelationships : Swift.Codable {
  public let data: [UNComponents.UNTransactionCustomerRelationships.Data]
  public struct Data : Swift.Codable {
    public let type: Swift.String
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAchPayment : Swift.Codable {
  public let type: UNComponents.UNPaymentType
  public let id: Swift.String
  public let attributes: UNComponents.UNAchPaymentAttributes
  public let relationships: UNComponents.UNAchPayment.Relationships
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNAchPayment.Relationships.Account
    public let customer: UNComponents.UNAchPayment.Relationships.Customer?
    public let customers: UNComponents.UNAchPayment.Relationships.Customers?
    public let transaction: UNComponents.UNAchPayment.Relationships.Transaction?
    public let counterparty: UNComponents.UNAchPayment.Relationships.Counterparty?
    public let recurringPayment: UNComponents.UNAchPayment.Relationships.RecurringPayment?
    public let org: UNComponents.UNAchPayment.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPaymentAccount
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPaymentCustomer
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPaymentCustomer]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Transaction : Swift.Codable {
      public let data: UNComponents.UNPaymentTransaction
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Counterparty : Swift.Codable {
      public let data: UNComponents.UNPaymentCounterparty
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RecurringPayment : Swift.Codable {
      public let data: UNComponents.UNRecurringPayment
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNOrg
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAchPaymentAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let amount: UNComponents.UNCents
  public let direction: UNComponents.UNDirection
  public let description: Swift.String
  public let status: UNComponents.UNPaymentStatus
  public let settlementDate: Swift.String?
  public let reason: Swift.String?
  public let tags: [Swift.String : Swift.String]?
  public let addenda: Swift.String?
  public let counterparty: UNComponents.UNAchCounterparty
  public let expectedCompletionDate: Swift.String?
  public let counterpartyVerificationMethod: UNComponents.UNCounterpartyVerificationMethod?
  public let sameDay: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNWirePaymentComponentCallbacks = (_ callback: UNComponents.UNWirePaymentComponentCallback) -> Swift.Void
public class UNCheckDepositViewSettingsBuilder : UNComponents.UNCheckDepositViewSettingsProtocol {
  public var initialStageBackButton: Swift.Bool {
    get
  }
  public var finalStageDoneButton: Swift.Bool {
    get
  }
  public init(initialStageBackButton: Swift.Bool = false, finalStageDoneButton: Swift.Bool = false)
  public func initialStageBackButton(_ initialStageBackButton: Swift.Bool) -> UNComponents.UNCheckDepositViewSettingsBuilder
  public func finalStageDoneButton(_ finalStageDoneButton: Swift.Bool) -> UNComponents.UNCheckDepositViewSettingsBuilder
  @objc deinit
}
public struct UNCardReversal : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNCardReversal.Attributes
  public let relationships: UNComponents.UNCardReversal.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let networkTransactionId: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNCardReversal.Relationships.Account
    public let customer: UNComponents.UNCardReversal.Relationships.Customer?
    public let customers: UNComponents.UNCardReversal.Relationships.Customers?
    public let relatedTransaction: UNComponents.UNCardReversal.Relationships.RelatedTransaction?
    public let org: UNComponents.UNCardReversal.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNCardReversal.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCardReversal.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNCardReversal.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RelatedTransaction : Swift.Codable {
      public let data: UNComponents.UNCardReversal.Relationships.RelatedTransaction.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCardReversal.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNComponentsUIFlows {
  func startPushProvisioning(for cardId: Swift.String, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?)
}
extension UNComponents.UNComponentsUIFlows {
  public func startPushProvisioning(for cardId: Swift.String, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil)
}
public struct UNPurchase : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNPurchase.Attributes
  public let relationships: UNComponents.UNPurchase.Relationships
  public struct Attributes : Swift.Codable {
    public let cardNetwork: Swift.String
    public let cardLast4Digits: Swift.String
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let interchange: Swift.Double?
    public let networkTransactionId: Swift.String?
    public let richMerchantData: UNComponents.UNRichMerchantData?
    public let paymentMethod: Swift.String?
    public let merchant: UNComponents.UNMerchant?
    public let recurring: Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNPurchase.Relationships.Account
    public let customer: UNComponents.UNPurchase.Relationships.Customer?
    public let customers: UNComponents.UNPurchase.Relationships.Customers?
    public let org: UNComponents.UNPurchase.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPurchase.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPurchase.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPurchase.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNPurchase.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class UNComponentsSDKConfigurationBuilder : UNComponents.UNComponentsSDKConfigurationProtocol {
  public var environment: UNComponents.UNComponentsEnvironment {
    get
  }
  public var webVersioningStrategy: UNComponents.UNWebVersioningStrategy {
    get
  }
  public init(environment: UNComponents.UNComponentsEnvironment = UNComponentsEnvironment.sandbox, webVersioningStrategy: UNComponents.UNWebVersioningStrategy? = nil)
  public func environment(_ environment: UNComponents.UNComponentsEnvironment) -> UNComponents.UNComponentsSDKConfigurationBuilder
  public func webVersioningStrategy(_ webVersioningStrategy: UNComponents.UNWebVersioningStrategy) -> UNComponents.UNComponentsSDKConfigurationBuilder
  @objc deinit
}
public enum UNCustomer : Swift.Codable {
  case individual(UNComponents.UNIndividual)
  case business(UNComponents.UNBusiness)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct UNIndividual : Swift.Codable {
  public let type: UNComponents.UNCustomerType
  public let id: Swift.String
  public let attributes: UNComponents.UNIndividual.Attributes
  public let relationships: UNComponents.UNIndividual.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let fullName: UNComponents.UNFullName
    public let ssn: Swift.String?
    public let passport: Swift.String?
    public let nationality: Swift.String?
    public let matriculaConsular: Swift.String?
    public let address: UNComponents.UNAddress
    public let dateOfBirth: Swift.String
    public let email: Swift.String
    public let phone: UNComponents.UNPhone
    public let tin: Swift.String?
    public let ip: Swift.String?
    public let ein: Swift.String?
    public let dba: Swift.String?
    public let soleProprietorship: Swift.Bool
    public let tags: [Swift.String : Swift.String]
    public let riskRate: UNComponents.UNRiskRate
    public let maskedSSN: Swift.String?
    public let maskedPassport: Swift.String?
    public let maskedMatriculaConsular: Swift.String?
    public let authorizedUsers: [UNComponents.UNAuthorizedUser]
    public let status: UNComponents.UNCustomerStatus
    public let archiveReason: UNComponents.UNArchiveReason?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let org: UNComponents.UNIndividual.Relationships.Org
    public let application: UNComponents.UNIndividual.Relationships.Application?
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNIndividual.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Application : Swift.Codable {
      public let data: UNComponents.UNIndividual.Relationships.Application.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNBusiness : Swift.Codable {
  public let type: UNComponents.UNCustomerType
  public let id: Swift.String
  public let attributes: UNComponents.UNBusiness.Attributes
  public let relationships: UNComponents.UNBusiness.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let name: UNComponents.UNFullName
    public let dba: Swift.String?
    public let address: UNComponents.UNAddress
    public let phone: UNComponents.UNPhone
    public let dateOfIncorporation: Swift.String
    public let stateOfIncorporation: Swift.String
    public let email: Swift.String
    public let ein: Swift.String?
    public let entityType: Swift.String
    public let contact: UNComponents.UNBusinessContact
    public let purpose: Swift.String
    public let tags: [Swift.String : Swift.String]
    public let riskRate: UNComponents.UNRiskRate
    public let authorizedUsers: [UNComponents.UNAuthorizedUser]
    public let status: UNComponents.UNCustomerStatus
    public let archiveReason: UNComponents.UNArchiveReason?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let org: UNComponents.UNBusiness.Relationships.Org
    public let application: UNComponents.UNBusiness.Relationships.Application?
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNBusiness.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Application : Swift.Codable {
      public let data: UNComponents.UNBusiness.Relationships.Application.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCustomerType : Swift.String, Swift.Codable {
  case individual
  case business
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCustomerStatus : Swift.String, Swift.Codable {
  case active
  case archived
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNArchiveReason : Swift.String, Swift.Codable {
  case inactive
  case fraudACHActivity
  case fraudCardActivity
  case fraudCheckActivity
  case fraudApplicationHistory
  case fraudAccountActivity
  case fraudClientIdentified
  case fraudLinkedToFraudulentCustomer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNBusinessContact : Swift.Codable {
  public let fullName: UNComponents.UNFullName
  public let email: Swift.String
  public let phone: UNComponents.UNPhone
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNPaymentAdvance : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNPaymentAdvance.Attributes
  public let relationships: UNComponents.UNPaymentAdvance.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNPaymentAdvance.Relationships.Account
    public let customer: UNComponents.UNPaymentAdvance.Relationships.Customer?
    public let customers: UNComponents.UNPaymentAdvance.Relationships.Customers?
    public let org: UNComponents.UNPaymentAdvance.Relationships.Org?
    public let receivedPayment: UNComponents.UNPaymentAdvance.Relationships.ReceivedPayment?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPaymentAdvance.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPaymentAdvance.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPaymentAdvance.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNPaymentAdvance.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReceivedPayment : Swift.Codable {
      public let data: UNComponents.UNPaymentAdvance.Relationships.ReceivedPayment.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class UNACHCreditViewSettingsBuilder : UNComponents.UNACHCreditViewSettingsProtocol {
  public var fee: Swift.Double? {
    get
  }
  public var isAutoFocus: Swift.Bool {
    get
  }
  public var withPlaid: Swift.Bool {
    get
  }
  public var plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]? {
    get
  }
  public var plaidLinkCustomizationName: Swift.String? {
    get
  }
  public var sameDay: Swift.Bool {
    get
  }
  public var initialStageBackButton: Swift.Bool {
    get
  }
  public var finalStageDoneButton: Swift.Bool {
    get
  }
  public var showSameDaySelection: Swift.Bool {
    get
  }
  public init(fee: Swift.Double? = nil, isAutoFocus: Swift.Bool = false, withPlaid: Swift.Bool = false, plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]? = nil, plaidLinkCustomizationName: Swift.String? = nil, sameDay: Swift.Bool = false, initialStageBackButton: Swift.Bool = false, finalStageDoneButton: Swift.Bool = false, showSameDaySelection: Swift.Bool = false)
  public func fee(_ fee: Swift.Double) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func withPlaid(_ withPlaid: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func plaidAccountFilters(_ plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func plaidLinkCustomizationName(_ plaidLinkCustomizationName: Swift.String) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func sameDay(_ sameDay: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func initialStageBackButton(_ initialStageBackButton: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func finalStageDoneButton(_ finalStageDoneButton: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func showSameDaySelection(_ showSameDaySelection: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  @objc deinit
}
public struct UNAtm : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNAtm.Attributes
  public let relationships: UNComponents.UNAtm.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let atmName: Swift.String
    public let atmLocation: Swift.String?
    public let interchange: Swift.String?
    public let networkTransactionId: Swift.String?
    public let cardLast4Digits: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNAtm.Relationships.Account
    public let customer: UNComponents.UNAtm.Relationships.Customer?
    public let customers: UNComponents.UNAtm.Relationships.Customers?
    public let org: UNComponents.UNAtm.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNAtm.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNAtm.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNAtm.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNAtm.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class UNCreateCardViewSettingsBuilder : UNComponents.UNCreateCardViewSettingsProtocol {
  public var cardTypes: [UNComponents.UNCreateCardType]? {
    get
  }
  public var virtualCardFee: Swift.Double? {
    get
  }
  public var physicalCardFee: Swift.Double? {
    get
  }
  public init(cardTypes: [UNComponents.UNCreateCardType]? = nil, virtualCardFee: Swift.Double? = nil, physicalCardFee: Swift.Double? = nil)
  public func cardTypes(_ cardTypes: [UNComponents.UNCreateCardType]?) -> UNComponents.UNCreateCardViewSettingsBuilder
  public func virtualCardFee(_ virtualCardFee: Swift.Double?) -> UNComponents.UNCreateCardViewSettingsBuilder
  public func physicalCardFee(_ physicalCardFee: Swift.Double?) -> UNComponents.UNCreateCardViewSettingsBuilder
  @objc deinit
}
public protocol UNMultipleCardsView : UIKit.UIView {
  var additionalSetting: any UNComponents.UNMultipleCardsViewSettingsProtocol { get set }
}
public protocol UNMultipleCardsViewSettingsProtocol {
  var paginationType: UNComponents.UNMultipleCardsComponentPaginationType { get }
  var cardsPerPage: Swift.Int? { get }
  var disableCardClick: Swift.Bool { get }
  var hideTitle: Swift.Bool { get }
  var hideBackToTop: Swift.Bool { get }
  var queryFilter: Swift.String? { get }
  var showSeeAllCardsLink: Swift.Bool { get }
  var isRowItemClickable: Swift.Bool { get }
}
public struct UNDispute : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNDispute.Attributes
  public let relationships: UNComponents.UNDispute.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNDispute.Relationships.Account
    public let customer: UNComponents.UNDispute.Relationships.Customer?
    public let customers: UNComponents.UNDispute.Relationships.Customers?
    public let org: UNComponents.UNDispute.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNDispute.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNDispute.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNDispute.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNDispute.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNBookPaymentComponentCallbacks = (_ callback: UNComponents.UNBookPaymentComponentCallback) -> Swift.Void
public struct UNFee : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNFee.Attributes
  public let relationships: UNComponents.UNFee.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNFee.Relationships.Account
    public let customer: UNComponents.UNFee.Relationships.Customer?
    public let customers: UNComponents.UNFee.Relationships.Customers?
    public let relatedTransaction: UNComponents.UNFee.Relationships.RelatedTransaction?
    public let org: UNComponents.UNFee.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNFee.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNFee.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNFee.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RelatedTransaction : Swift.Codable {
      public let data: UNComponents.UNFee.Relationships.RelatedTransaction.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNFee.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNAccountMenuAction : Swift.String {
  case openAccountDetails
  case openAccountStatements
  case downloadBankVerificationLetter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNRelease : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNRelease.Attributes
  public let relationships: UNComponents.UNRelease.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNRelease.Relationships.Account
    public let customer: UNComponents.UNRelease.Relationships.Customer?
    public let customers: UNComponents.UNRelease.Relationships.Customers?
    public let org: UNComponents.UNRelease.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNRelease.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNRelease.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNRelease.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNRelease.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCreateCardComponentResources : Swift.Codable {
  public let type: Swift.String
  public let attributes: UNComponents.UNCreateCardComponentResources.Attributes
  public struct Attributes : Swift.Codable {
    public let accounts: [UNComponents.UNCreateCardComponentAccount]
    public let customer: UNComponents.UNCreateCardCustomer
    public let possibleCardholders: [UNComponents.UNCardholder]
    public let resourceDiscovery: UNComponents.UNResourceDiscovery
    public let bin: [UNComponents.UNBin]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCreateCardComponentAccount : Swift.Codable {
  case deposit(UNComponents.UNCreateCardComponentDepositAccount)
  case credit(UNComponents.UNCreateCardComponentCreditAccount)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct UNCreateCardComponentDepositAccount : Swift.Codable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNCreateCardComponentDepositAccount.Attributes
  public struct Attributes : Swift.Codable {
    public let name: Swift.String
    public let tags: [Swift.String : Swift.String]
    public let routingNumber: Swift.String
    public let accountNumber: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCreateCardComponentCreditAccount : Swift.Codable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNCreateCardComponentCreditAccount.Attributes
  public struct Attributes : Swift.Codable {
    public let name: Swift.String
    public let tags: [Swift.String : Swift.String]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCreateCardCustomer : Swift.Codable {
  case individual(UNComponents.UNCreateCardComponentIndividualCustomer)
  case business(UNComponents.UNCreateCardComponentBusinessCustomer)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct UNCreateCardComponentIndividualCustomer : Swift.Codable {
  public let type: UNComponents.UNCustomerType
  public let attributes: UNComponents.UNCreateCardComponentIndividualCustomer.Attributes
  public struct Attributes : Swift.Codable {
    public let fullName: UNComponents.UNFullName
    public let address: UNComponents.UNAddress
    public let dateOfBirth: Swift.String
    public let email: Swift.String
    public let phone: UNComponents.UNPhone
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCreateCardComponentBusinessCustomer : Swift.Codable {
  public let type: UNComponents.UNCustomerType
  public let attributes: UNComponents.UNCreateCardComponentBusinessCustomer.Attributes
  public struct Attributes : Swift.Codable {
    public let name: UNComponents.UNFullName
    public let address: UNComponents.UNAddress
    public let phone: UNComponents.UNPhone
    public let contact: UNComponents.UNBusinessContact
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCardholder : Swift.Codable {
  public let type: Swift.String
  public let sttributes: UNComponents.UNCardholderAttributes
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCardholderAttributes : Swift.Codable {
  public let fullName: UNComponents.UNFullName
  public let address: UNComponents.UNAddress
  public let dateOfBirth: Swift.String
  public let email: Swift.String
  public let phone: UNComponents.UNPhone
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNResourceDiscovery : Swift.Codable {
  public let type: Swift.String
  public let attributes: UNComponents.UNResourceDiscovery.Attributes
  public let relationships: UNComponents.UNResourceDiscovery.Relationships
  public struct Attributes : Swift.Codable {
    public let featureSettings: UNComponents.UNFeatureSettings?
    public let accountManifest: [UNComponents.UNAccountManifest]?
    public let legalLinks: UNComponents.UNLegalLinks?
    public let brandName: Swift.String?
    public let supportComponent: UNComponents.UNSupportComponent?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let customer: UNComponents.UNResourceDiscovery.Relationships.Customer
    public let accounts: UNComponents.UNResourceDiscovery.Relationships.Accounts
    public let cards: UNComponents.UNResourceDiscovery.Relationships.Cards
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNResourceDiscovery.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Accounts : Swift.Codable {
      public let data: [UNComponents.UNRelationship]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Cards : Swift.Codable {
      public let data: [UNComponents.UNRelationship]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNRelationship : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNSupportComponent : Swift.Codable {
  public let attributes: UNComponents.UNSupportComponent.Attributes
  public struct Attributes : Swift.Codable {
    public let provider: UNComponents.UNSupportType?
    public let widgetId: Swift.String?
    public let widgetToken: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNSupportType : Swift.String, Swift.Codable {
  case zendesk
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNBin : Swift.Codable {
  public let attributes: UNComponents.UNBin.Attributes
  public let type: Swift.String
  public struct Attributes : Swift.Codable {
    public let bin: Swift.String
    public let institutionId: Swift.String
    public let product: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNFeatureSettings : Swift.Codable {
  public let wirePayment: UNComponents.UNEnabled?
  public let achDebitPayment: UNComponents.UNEnabled?
  public let quickbooks: UNComponents.UNEnabled?
  public let sameDayAch: UNComponents.UNEnabled?
  public let appUsers: UNComponents.UNEnabled?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNEnabled : Swift.Codable {
  public let enabled: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAccountManifest : Swift.Codable {
  public let type: Swift.String
  public let attributes: UNComponents.UNAccountManifest.Attributes
  public struct Attributes : Swift.Codable {
    public let accountId: Swift.String
    public let bankName: Swift.String
    public let maxNumberOfPhysicalCards: Swift.Double?
    public let maxNumberOfVirtualCards: Swift.Double?
    public let dailyCardWithdrawalLimit: Swift.Double
    public let dailyCardDepositLimit: Swift.Double
    public let dailyCardPurchaseLimit: Swift.Double
    public let outgoingWireFee: Swift.Double
    public let outgoingAchFee: Swift.Double
    public let sameDayAchFee: Swift.Double
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNLegalLinks : Swift.Codable {
  public let privacyPolicyUrl: Swift.String?
  public let electronicDisclosuresUrl: Swift.String?
  public let depositTermsUrl: Swift.String?
  public let clientTermsUrl: Swift.String?
  public let cardholderTermsUrl: Swift.String?
  public let cashAdvancedTermsUrl: Swift.String?
  public let debitCardDisclosureUrl: Swift.String?
  public let additionalDisclosures: [UNComponents.UNAdditionalDisclosure]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAdditionalDisclosure : Swift.Codable {
  public let title: Swift.String
  public let url: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNFullName : Swift.Codable {
  public let first: Swift.String
  public let last: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAddress : Swift.Codable {
  public let street: Swift.String
  public let street2: Swift.String?
  public let city: Swift.String
  public let state: Swift.String?
  public let postalCode: Swift.String
  public let country: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNPhone : Swift.Codable {
  public let countryCode: Swift.String
  public let number: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAuthorizedUser : Swift.Codable {
  public let fullName: UNComponents.UNFullName
  public let email: Swift.String
  public let phone: UNComponents.UNPhone
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNRiskRate : Swift.String, Swift.Codable {
  case low
  case medium
  case high
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class UNProgramDetailsViewSettingsBuilder : UNComponents.UNProgramDetailsViewSettingsProtocol {
  public var hideTitle: Swift.Bool {
    get
  }
  public init(hideTitle: Swift.Bool = false)
  public func hideTitle(_ hideTitle: Swift.Bool) -> any UNComponents.UNProgramDetailsViewSettingsProtocol
  @objc deinit
}
public protocol UNACHCreditView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var additionalSettings: any UNComponents.UNACHCreditViewSettingsProtocol { get set }
}
public protocol UNACHCreditViewSettingsProtocol {
  var fee: Swift.Double? { get }
  var isAutoFocus: Swift.Bool { get }
  var withPlaid: Swift.Bool { get }
  var plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]? { get }
  var plaidLinkCustomizationName: Swift.String? { get }
  var sameDay: Swift.Bool { get }
  var initialStageBackButton: Swift.Bool { get }
  var finalStageDoneButton: Swift.Bool { get }
  var showSameDaySelection: Swift.Bool { get }
}
public enum UNCreateCardComponentCallback {
  case unitOnLoad(result: Swift.Result<UNComponents.UNCreateCardComponentResources, UNComponents.UNComponentsError>)
  case cardCreated(data: UNComponents.UNCard)
}
public enum UNCreateCardType : Swift.String {
  case physical
  case virtual
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UNACHDebitView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var additionalSettings: any UNComponents.UNACHDebitViewSettingsProtocol { get set }
}
public protocol UNACHDebitViewSettingsProtocol {
  var fee: Swift.Double? { get }
  var isAutoFocus: Swift.Bool { get }
  var sameDay: Swift.Bool { get }
  var plaidAccountFilters: [UNComponents.UNPlaidAccountFilter]? { get }
  var plaidLinkCustomizationName: Swift.String? { get }
  var initialStageBackButton: Swift.Bool { get }
  var finalStageDoneButton: Swift.Bool { get }
  var showSameDaySelection: Swift.Bool { get }
}
public typealias UNAccountComponentCallbacks = (_ callback: UNComponents.UNAccountComponentCallback) -> Swift.Void
public typealias UNComponentsFonts = [UNComponents.UNComponentsFontFamilyName : [UNComponents.UNComponentsFontData]]
public typealias UNComponentsFontFamilyName = Swift.String
public struct UNComponentsFontData {
  public let fontWeight: UNComponents.FontWeight
  public let sources: [UNComponents.UNComponentsFontSource]
  public init(fontWeight: UNComponents.FontWeight, sources: [UNComponents.UNComponentsFontSource])
}
public struct UNComponentsFontSource {
  public let fileName: Swift.String
  public let format: Swift.String?
  public init(fileName: Swift.String, format: Swift.String? = nil)
}
public enum FontWeight {
  case thin
  case extraLight
  case light
  case regular
  case medium
  case semiBold
  case bold
  case extraBold
  case black
  public static func == (a: UNComponents.FontWeight, b: UNComponents.FontWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class UNComponentsSecuritySettingsBuilder : UNComponents.UNComponentsSecuritySettingsProtocol {
  public var snapshotProtectionStrategy: UNComponents.UNSnapshotProtectionStrategy {
    get
  }
  public init(snapshotProtectionStrategy: UNComponents.UNSnapshotProtectionStrategy = UNSnapshotProtectionStrategy.default())
  public func snapshotProtectionStrategy(_ snapshotProtectionStrategy: UNComponents.UNSnapshotProtectionStrategy) -> UNComponents.UNComponentsSecuritySettingsBuilder
  @objc deinit
}
public struct UNReturnedAch : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNReturnedAch.Attributes
  public let relationships: UNComponents.UNReturnedAch.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let companyName: Swift.String
    public let counterpartyName: Swift.String
    public let counterpartyRoutingNumber: Swift.String
    public let reason: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNReturnedAch.Relationships.Account
    public let customer: UNComponents.UNReturnedAch.Relationships.Customer?
    public let customers: UNComponents.UNReturnedAch.Relationships.Customers?
    public let org: UNComponents.UNReturnedAch.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNReturnedAch.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNReturnedAch.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNReturnedAch.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNReturnedAch.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNActivityComponentCallback {
  case unitOnLoad(result: Swift.Result<UNComponents.UNActivityOnLoadResponse, UNComponents.UNComponentsError>)
}
public enum UNActivityComponentPaginationType : Swift.String {
  case infiniteScroll
  case pagination
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNProgramDetailsComponentCallback {
  case unitOnLoad(result: Swift.Result<UNComponents.UNAccount, UNComponents.UNComponentsError>)
}
public struct UNSettlement : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNSettlement.Attributes
  public let relationships: UNComponents.UNSettlement.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNSettlement.Relationships.Account
    public let customer: UNComponents.UNSettlement.Relationships.Customer?
    public let customers: UNComponents.UNSettlement.Relationships.Customers?
    public let org: UNComponents.UNSettlement.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNSettlement.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNSettlement.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNSettlement.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNSettlement.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNACHDebitComponentCallback {
  case onPaymentCreated(data: UNComponents.UNAchPayment)
  case onInitialStageBackButtonClicked
  case onFinalStageDoneButtonClicked
  case unitOnLoad(result: Swift.Result<UNComponents.UNACHDebitOnLoadResponse, UNComponents.UNComponentsError>)
}
public enum UNCard : Swift.Codable {
  case individualDebitCard(UNComponents.UNIndividualDebitCard)
  case individualVirtualDebitCard(UNComponents.UNIndividualVirtualDebitCard)
  case businessDebitCard(UNComponents.UNBusinessDebitCard)
  case businessVirtualDebitCard(UNComponents.UNBusinessVirtualDebitCard)
  case businessCreditCard(UNComponents.UNBusinessCreditCard)
  case businessVirtualCreditCard(UNComponents.UNBusinessVirtualCreditCard)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct UNIndividualDebitCard : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNIndividualDebitCard.Attributes
  public let relationships: UNComponents.UNIndividualDebitCard.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let last4Digits: Swift.String
    public let expirationDate: Swift.String
    public let shippingAddress: UNComponents.UNAddress?
    public let status: UNComponents.UNCardStatus
    public let freezeReason: Swift.String?
    public let design: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public let bin: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNIndividualDebitCard.Relationships.Account
    public let customer: UNComponents.UNIndividualDebitCard.Relationships.Customer
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNIndividualDebitCard.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNIndividualDebitCard.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNIndividualVirtualDebitCard : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNIndividualVirtualDebitCard.Attributes
  public let relationships: UNComponents.UNIndividualVirtualDebitCard.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let last4Digits: Swift.String
    public let expirationDate: Swift.String
    public let status: UNComponents.UNCardStatus
    public let freezeReason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public let bin: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNIndividualVirtualDebitCard.Relationships.Account
    public let customer: UNComponents.UNIndividualVirtualDebitCard.Relationships.Customer
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNIndividualVirtualDebitCard.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNIndividualVirtualDebitCard.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNBusinessVirtualCreditCard : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNBusinessVirtualCreditCard.Attributes
  public let relationships: UNComponents.UNBusinessVirtualCreditCard.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let last4Digits: Swift.String
    public let expirationDate: Swift.String
    public let fullName: UNComponents.UNFullName
    public let nationality: Swift.String
    public let ssn: Swift.String?
    public let passport: Swift.String?
    public let address: UNComponents.UNAddress
    public let dateOfBirth: Swift.String
    public let email: Swift.String
    public let phone: UNComponents.UNPhone
    public let status: UNComponents.UNCardStatus
    public let freezeReason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public let bin: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBusinessVirtualCreditCard.Relationships.Account
    public let customer: UNComponents.UNBusinessVirtualCreditCard.Relationships.Customer
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBusinessVirtualCreditCard.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBusinessVirtualCreditCard.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNBusinessCreditCard : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNBusinessCreditCard.Attributes
  public let relationships: UNComponents.UNBusinessCreditCard.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let shippingAddress: UNComponents.UNAddress?
    public let last4Digits: Swift.String
    public let expirationDate: Swift.String
    public let fullName: UNComponents.UNFullName
    public let nationality: Swift.String
    public let ssn: Swift.String?
    public let passport: Swift.String?
    public let address: UNComponents.UNAddress
    public let dateOfBirth: Swift.String
    public let email: Swift.String
    public let phone: UNComponents.UNPhone
    public let status: UNComponents.UNCardStatus
    public let freezeReason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public let bin: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBusinessCreditCard.Relationships.Account
    public let customer: UNComponents.UNBusinessCreditCard.Relationships.Customer
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBusinessCreditCard.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBusinessCreditCard.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNBusinessDebitCard : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNBusinessDebitCard.Attributes
  public let relationships: UNComponents.UNBusinessDebitCard.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let last4Digits: Swift.String
    public let expirationDate: Swift.String
    public let shippingAddress: UNComponents.UNAddress?
    public let fullName: UNComponents.UNFullName
    public let nationality: Swift.String
    public let ssn: Swift.String?
    public let passport: Swift.String?
    public let address: UNComponents.UNAddress
    public let dateOfBirth: Swift.String
    public let email: Swift.String
    public let phone: UNComponents.UNPhone
    public let status: UNComponents.UNCardStatus
    public let freezeReason: Swift.String?
    public let design: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public let bin: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBusinessDebitCard.Relationships.Account
    public let customer: UNComponents.UNBusinessDebitCard.Relationships.Customer
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBusinessDebitCard.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBusinessDebitCard.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNBusinessVirtualDebitCard : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNBusinessVirtualDebitCard.Attributes
  public let relationships: UNComponents.UNBusinessVirtualDebitCard.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let last4Digits: Swift.String
    public let expirationDate: Swift.String
    public let fullName: UNComponents.UNFullName
    public let nationality: Swift.String
    public let ssn: Swift.String?
    public let passport: Swift.String?
    public let address: UNComponents.UNAddress
    public let dateOfBirth: Swift.String
    public let email: Swift.String
    public let phone: UNComponents.UNPhone
    public let status: UNComponents.UNCardStatus
    public let freezeReason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public let bin: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBusinessVirtualDebitCard.Relationships.Account
    public let customer: UNComponents.UNBusinessVirtualDebitCard.Relationships.Customer
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBusinessVirtualDebitCard.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBusinessVirtualDebitCard.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCardType : Swift.String, Swift.Codable {
  case individualDebitCard
  case individualVirtualDebitCard
  case businessDebitCard
  case businessVirtualDebitCard
  case businessCreditCard
  case businessVirtualCreditCard
  public var isVirtual: Swift.Bool {
    get
  }
  public var typeDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCardStatus : Swift.String, Swift.Codable {
  case inactive
  case active
  case stolen
  case lost
  case frozen
  case closedByCustomer
  case suspectedFraud
  case activeForOnlineUse
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UNComponentsManagerProtocol : AnyObject {
  var customerToken: UNComponents.UNCustomerToken? { get set }
  var securitySettings: any UNComponents.UNComponentsSecuritySettingsProtocol { get set }
  var ui: any UNComponents.UNComponentsUI { get }
  var authentication: any UNComponents.UNComponentsAuthentication { get }
  var services: any UNComponents.UNComponentsServices { get }
  var helpers: any UNComponents.UNComponentsHelpers { get }
  func initialize(with configurationSettings: any UNComponents.UNComponentsSDKConfigurationProtocol)
}
public protocol UNComponentsUIViews {
  func getCardComponent(id: Swift.String, additionalSettings: (any UNComponents.UNCardViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNCardComponentCallbacks?) -> any UNComponents.UNCardView
  func getACHCreditComponent(accountId: Swift.String?, additionalSettings: (any UNComponents.UNACHCreditViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNACHCreditComponentCallbacks?) -> any UNComponents.UNACHCreditView
  func getACHDebitComponent(accountId: Swift.String?, additionalSettings: (any UNComponents.UNACHDebitViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNACHDebitComponentCallbacks?) -> any UNComponents.UNACHDebitView
  func getActivityComponent(accountId: Swift.String?, additionalSettings: (any UNComponents.UNActivityViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNActivityComponentCallbacks?) -> any UNComponents.UNActivityView
  func getAccountComponent(accountId: Swift.String?, additionalSettings: (any UNComponents.UNAccountViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNAccountComponentCallbacks?) -> any UNComponents.UNAccountView
  func getBookPaymentComponent(accountId: Swift.String?, counterpartyAccountId: Swift.String?, counterpartyName: Swift.String?, isSameCustomer: Swift.Bool, additionalSettings: (any UNComponents.UNBookPaymentViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNBookPaymentComponentCallbacks?) -> any UNComponents.UNBookPaymentView
  func getCheckDepositComponent(accountId: Swift.String, fee: Swift.Double?, additionalSettings: (any UNComponents.UNCheckDepositViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNCheckDepositComponentCallbacks?) -> any UNComponents.UNCheckDepositView
  func getMultipleCardsComponent(additionalSettings: (any UNComponents.UNMultipleCardsViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNMultipleCardsComponentCallbacks?) -> any UNComponents.UNMultipleCardsView
  func getProgramDetailsComponent(accountId: Swift.String, additionalSettings: (any UNComponents.UNProgramDetailsViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNProgramDetailsComponentCallbacks?) -> any UNComponents.UNProgramDetailsView
  func getWirePaymentComponent(accountId: Swift.String?, fee: Swift.Double?, additionalSettings: (any UNComponents.UNWirePaymentViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNWirePaymentComponentCallbacks?) -> any UNComponents.UNWirePaymentView
  func getCreateCardComponent(accountId: Swift.String?, additionalSettings: (any UNComponents.UNCreateCardViewSettingsProtocol)?, theme: UNComponents.UNComponentsTheme?, language: UNComponents.UNComponentsLanguage?, callbacks: UNComponents.UNCreateCardComponentCallbacks?) -> any UNComponents.UNCreateCardView
}
extension UNComponents.UNComponentsUIViews {
  public func getCardComponent(id: Swift.String, additionalSettings: (any UNComponents.UNCardViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNCardComponentCallbacks? = nil) -> any UNComponents.UNCardView
  public func getACHCreditComponent(accountId: Swift.String? = nil, additionalSettings: (any UNComponents.UNACHCreditViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNACHCreditComponentCallbacks? = nil) -> any UNComponents.UNACHCreditView
  public func getACHDebitComponent(accountId: Swift.String? = nil, additionalSettings: (any UNComponents.UNACHDebitViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNACHDebitComponentCallbacks? = nil) -> any UNComponents.UNACHDebitView
  public func getActivityComponent(accountId: Swift.String? = nil, additionalSettings: (any UNComponents.UNActivityViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNActivityComponentCallbacks? = nil) -> any UNComponents.UNActivityView
  public func getAccountComponent(accountId: Swift.String? = nil, additionalSettings: (any UNComponents.UNAccountViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNAccountComponentCallbacks? = nil) -> any UNComponents.UNAccountView
  public func getBookPaymentComponent(accountId: Swift.String? = nil, counterpartyAccountId: Swift.String? = nil, counterpartyName: Swift.String? = nil, isSameCustomer: Swift.Bool = false, additionalSettings: (any UNComponents.UNBookPaymentViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNBookPaymentComponentCallbacks? = nil) -> any UNComponents.UNBookPaymentView
  public func getCheckDepositComponent(accountId: Swift.String, fee: Swift.Double? = nil, additionalSettings: (any UNComponents.UNCheckDepositViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNCheckDepositComponentCallbacks? = nil) -> any UNComponents.UNCheckDepositView
  public func getMultipleCardsComponent(additionalSettings: (any UNComponents.UNMultipleCardsViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNMultipleCardsComponentCallbacks? = nil) -> any UNComponents.UNMultipleCardsView
  public func getProgramDetailsComponent(accountId: Swift.String, additionalSettings: (any UNComponents.UNProgramDetailsViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNProgramDetailsComponentCallbacks? = nil) -> any UNComponents.UNProgramDetailsView
  public func getWirePaymentComponent(accountId: Swift.String? = nil, fee: Swift.Double? = nil, additionalSettings: (any UNComponents.UNWirePaymentViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNWirePaymentComponentCallbacks? = nil) -> any UNComponents.UNWirePaymentView
  public func getCreateCardComponent(accountId: Swift.String? = nil, additionalSettings: (any UNComponents.UNCreateCardViewSettingsProtocol)? = nil, theme: UNComponents.UNComponentsTheme? = nil, language: UNComponents.UNComponentsLanguage? = nil, callbacks: UNComponents.UNCreateCardComponentCallbacks? = nil) -> any UNComponents.UNCreateCardView
}
public struct UNReceivedAch : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNReceivedAch.Attributes
  public let relationships: UNComponents.UNReceivedAch.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let description: Swift.String
    public let companyName: Swift.String
    public let counterpartyRoutingNumber: Swift.String
    public let secCode: Swift.String
    public let traceNumber: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNReceivedAch.Relationships.Account
    public let customer: UNComponents.UNReceivedAch.Relationships.Customer?
    public let customers: UNComponents.UNReceivedAch.Relationships.Customers?
    public let org: UNComponents.UNReceivedAch.Relationships.Org?
    public let incomingAch: UNComponents.UNReceivedAch.Relationships.IncomingAch?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNReceivedAch.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNReceivedAch.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNReceivedAch.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNReceivedAch.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct IncomingAch : Swift.Codable {
      public let data: UNComponents.UNReceivedAch.Relationships.IncomingAch.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class UNCardViewSettingsBuilder : UNComponents.UNCardViewSettingsProtocol {
  public var hideActionsMenuButton: Swift.Bool {
    get
  }
  public var hideCardTitle: Swift.Bool {
    get
  }
  public var hideSensitiveDataButton: Swift.Bool {
    get
  }
  public var enablePushProvisioning: Swift.Bool {
    get
  }
  public var learnMoreUrl: Swift.String {
    get
  }
  public var menuItems: [UNComponents.UNCardComponentMenuItems]? {
    get
  }
  public var fee: Swift.Double? {
    get
  }
  public var showCardTypeSubtitle: Swift.Bool {
    get
  }
  public var showCardHolderSubtitle: Swift.Bool {
    get
  }
  public init(hideActionsMenuButton: Swift.Bool = false, hideCardTitle: Swift.Bool = false, hideSensitiveDataButton: Swift.Bool = false, enablePushProvisioning: Swift.Bool = false, learnMoreUrl: Swift.String = "", menuItems: [UNComponents.UNCardComponentMenuItems]? = nil, fee: Swift.Double? = nil, showCardTypeSubtitle: Swift.Bool = true, showCardHolderSubtitle: Swift.Bool = true)
  public func hideActionsMenuButton(_ hideActionsMenuButton: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func hideCardTitle(_ hideCardTitle: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func hideSensitiveDataButton(_ hideSensitiveDataButton: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func enablePushProvisioning(_ enablePushProvisioning: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func learnMoreUrl(_ learnMoreUrl: Swift.String) -> UNComponents.UNCardViewSettingsBuilder
  public func menuItems(_ menuItems: [UNComponents.UNCardComponentMenuItems]) -> UNComponents.UNCardViewSettingsBuilder
  public func fee(_ fee: Swift.Double?) -> UNComponents.UNCardViewSettingsBuilder
  public func showCardTypeSubtitle(_ showCardTypeSubtitle: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func showCardHolderSubtitle(_ showCardHolderSubtitle: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  @objc deinit
}
public enum UNCheckDepositComponentCallback {
  case unitCheckDepositCreated(data: UNComponents.UNCheckDeposit)
  case unitCheckDepositRestartRequest(data: UNComponents.UNCheckDeposit)
  case onInitialStageBackButtonClicked
  case onFinalStageDoneButtonClicked
  case unitOnLoad(result: Swift.Result<UNComponents.UNAccount, UNComponents.UNComponentsError>)
}
public protocol UNComponentsSecuritySettingsProtocol : AnyObject {
  var snapshotProtectionStrategy: UNComponents.UNSnapshotProtectionStrategy { get }
}
public struct UNActivityOnLoadResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNCheckDepositView : UIKit.UIView {
  var accountId: Swift.String { get set }
  var fee: Swift.Double? { get set }
  var additionalSettings: any UNComponents.UNCheckDepositViewSettingsProtocol { get set }
}
public protocol UNCheckDepositViewSettingsProtocol {
  var initialStageBackButton: Swift.Bool { get }
  var finalStageDoneButton: Swift.Bool { get }
}
public struct UNBookPayment : Swift.Codable {
  public let type: UNComponents.UNPaymentType
  public let id: Swift.String
  public let attributes: UNComponents.UNBookPayment.Attributes
  public let relationships: UNComponents.UNBookPayment.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let description: Swift.String
    public let status: UNComponents.UNPaymentStatus
    public let reason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBookPayment.Relationships.Account
    public let customer: UNComponents.UNBookPayment.Relationships.Customer?
    public let customers: UNComponents.UNBookPayment.Relationships.Customers?
    public let transaction: UNComponents.UNBookPayment.Relationships.Transaction?
    public let counterpartyAccount: UNComponents.UNBookPayment.Relationships.CounterpartyAccount
    public let counterpartyCustomer: UNComponents.UNBookPayment.Relationships.CounterpartyCustomer
    public let recurringPayment: UNComponents.UNBookPayment.Relationships.RecurringPayment?
    public let org: UNComponents.UNBookPayment.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPaymentAccount
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPaymentCustomer
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPaymentCustomer]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Transaction : Swift.Codable {
      public let data: UNComponents.UNPaymentTransaction
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CounterpartyAccount : Swift.Codable {
      public let data: UNComponents.UNBookPayment.Relationships.CounterpartyAccount.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CounterpartyCustomer : Swift.Codable {
      public let data: UNComponents.UNBookPayment.Relationships.CounterpartyCustomer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RecurringPayment : Swift.Codable {
      public let data: UNComponents.UNRecurringPayment
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNOrg
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNReturnedCheckDeposit : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNReturnedCheckDeposit.Attributes
  public let relationships: UNComponents.UNReturnedCheckDeposit.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNReturnedCheckDeposit.Relationships.Account
    public let customer: UNComponents.UNReturnedCheckDeposit.Relationships.Customer?
    public let customers: UNComponents.UNReturnedCheckDeposit.Relationships.Customers?
    public let org: UNComponents.UNReturnedCheckDeposit.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNReturnedCheckDeposit.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNReturnedCheckDeposit.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNReturnedCheckDeposit.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNReturnedCheckDeposit.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNPayment : Swift.Codable {
  case achPayment(UNComponents.UNAchPayment)
  case bookPayment(UNComponents.UNBookPayment)
  case wirePayment(UNComponents.UNWirePayment)
  case billPayment(UNComponents.UNBillPayment)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum UNPaymentType : Swift.String, Swift.Codable {
  case achPayment
  case bookPayment
  case wirePayment
  case billPayment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNPaymentStatus : Swift.String, Swift.Codable {
  case pending
  case rejected
  case clearing
  case sent
  case canceled
  case returned
  case pendingReview
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNDirection : Swift.String, Swift.Codable {
  case debit
  case credit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNPaymentAccountType : Swift.String, Swift.Codable {
  case savings
  case checking
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNPlaidAccountFilter : Swift.String, Swift.Codable {
  case savings
  case checking
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCounterpartyVerificationMethod : Swift.String, Swift.Codable {
  case plaid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNOrg : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNRecurringPayment : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNPaymentCustomer : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNPaymentTransaction : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNPaymentCounterparty : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNPaymentAccount : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNCents = Swift.Double
public struct UNAchCounterparty : Swift.Codable {
  public let name: Swift.String
  public let accountNumber: Swift.String
  public let routingNumber: Swift.String
  public let accountType: UNComponents.UNPaymentAccountType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAccountLowBalanceClosure : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNAccountLowBalanceClosure.Attributes
  public let relationships: UNComponents.UNAccountLowBalanceClosure.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNAccountLowBalanceClosure.Relationships.Account
    public let customer: UNComponents.UNAccountLowBalanceClosure.Relationships.Customer?
    public let customers: UNComponents.UNAccountLowBalanceClosure.Relationships.Customers?
    public let org: UNComponents.UNAccountLowBalanceClosure.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNAccountLowBalanceClosure.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNAccountLowBalanceClosure.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNAccountLowBalanceClosure.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNAccountLowBalanceClosure.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNBookPaymentComponentCallback {
  case onPaymentCreated(data: UNComponents.UNBookPayment)
  case onInitialStageBackButtonClicked
  case onFinalStageDoneButtonClicked
  case unitOnLoad(result: Swift.Result<[UNComponents.UNAccount], UNComponents.UNComponentsError>)
}
public struct UNVPError : Swift.Error {
  public let code: Swift.String
  public let description: Swift.String
  public let type: UNComponents.UNVPErrorType
  public let correlationId: Swift.String
  public init(code: Swift.String, description: Swift.String, type: UNComponents.UNVPErrorType, correlationId: Swift.String)
}
public enum UNVPErrorType {
  case emptyAppId
  case emptyEnvironment
  case deviceAuthenticationFailed
  case deviceRootDetection
  case emptyEncryptedPayload
  case invalidCardLast4Digits
  case noWallets
  case unsupportedCard
  case cancelledByUser
  case cancelledBySystem
  case passKitUnknown
  case unableToCreatePaymentPassView
  case validCertificatesNotFound
  case provisioningNotAllowed
  case networkFailure
  case sessionExpired
  case invalidCardInfo
  case payloadDecryptionFailed
  case apiError
  case navigationBarMissing
  case walletProvisioningError
  case walletProvisioningInconclusive
  case sdkLockout
  case invalidNonce
  case reversedEngineered
  case noBrowserFound
  case TLCMFeatureNotSupported
  case TLCMUnsupportedWallet
  case TLCMDetailsNotFoundInPaySdk
  case TLCMTokenStatusExists
  case TLCMInvalidOperationInput
  case TLCMInvalidRequest
  case TLCMTokenNotFound
  case TLCMUpdateStatusNotAllowed
  public static func == (a: UNComponents.UNVPErrorType, b: UNComponents.UNVPErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UNVPProvisionStatus {
  case readyToProvision
  case alreadyProvisioned
  case provisionedInCurrentDevice
  case provisionedInPairedDevice
  case notAvailable
  public static func == (a: UNComponents.UNVPProvisionStatus, b: UNComponents.UNVPProvisionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UNVPSupportedWallet {
  public init(name: Swift.String, description: Swift.String, status: UNComponents.UNVPProvisionStatus, reason: UNComponents.UNVPReason)
}
public struct UNVPReason {
  public init(reason: Swift.String, description: Swift.String)
}
public struct UNVPCardProvisioningResponse {
  public init(walletStatus: UNComponents.UNVPProvisionStatus)
}
public class UNActivityViewSettingsBuilder : UNComponents.UNActivityViewSettingsProtocol {
  public var paginationType: UNComponents.UNActivityComponentPaginationType {
    get
  }
  public var transactionsPerPage: Swift.Int? {
    get
  }
  public var hideFilterButton: Swift.Bool {
    get
  }
  public var hideTitle: Swift.Bool {
    get
  }
  public var hideBackToTop: Swift.Bool {
    get
  }
  public var queryFilter: Swift.String? {
    get
  }
  public init(hideFilterButton: Swift.Bool = false, paginationType: UNComponents.UNActivityComponentPaginationType = .infiniteScroll, transactionsPerPage: Swift.Int? = nil, hideTitle: Swift.Bool = false, hideBackToTop: Swift.Bool = false, queryFilter: Swift.String? = nil)
  public func hideFilterButton(_ hideFilterButton: Swift.Bool) -> UNComponents.UNActivityViewSettingsBuilder
  public func paginationType(_ paginationType: UNComponents.UNActivityComponentPaginationType) -> UNComponents.UNActivityViewSettingsBuilder
  public func transactionsPerPage(_ transactionsPerPage: Swift.Int) -> UNComponents.UNActivityViewSettingsBuilder
  public func hideTitle(_ hideTitle: Swift.Bool) -> UNComponents.UNActivityViewSettingsBuilder
  public func hideBackToTop(_ hideBackToTop: Swift.Bool) -> UNComponents.UNActivityViewSettingsBuilder
  public func queryFilter(_ queryFilter: Swift.String) -> UNComponents.UNActivityViewSettingsBuilder
  @objc deinit
}
public class UNWirePaymentViewSettingsBuilder : UNComponents.UNWirePaymentViewSettingsProtocol {
  public var isAutoFocus: Swift.Bool {
    get
  }
  public var initialStageBackButton: Swift.Bool {
    get
  }
  public var finalStageDoneButton: Swift.Bool {
    get
  }
  public init(isAutoFocus: Swift.Bool = false, initialStageBackButton: Swift.Bool = false, finalStageDoneButton: Swift.Bool = false)
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNWirePaymentViewSettingsBuilder
  public func initialStageBackButton(_ initialStageBackButton: Swift.Bool) -> UNComponents.UNWirePaymentViewSettingsBuilder
  public func finalStageDoneButton(_ finalStageDoneButton: Swift.Bool) -> UNComponents.UNWirePaymentViewSettingsBuilder
  @objc deinit
}
public enum UNSnapshotProtectionStrategy {
  case none
  case fullProtection(style: UIKit.UIBlurEffect.Style)
  case views(style: UIKit.UIBlurEffect.Style)
  public static func `default`() -> UNComponents.UNSnapshotProtectionStrategy
}
public protocol UNWirePaymentView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var fee: Swift.Double? { get set }
  var additionalSettings: any UNComponents.UNWirePaymentViewSettingsProtocol { get set }
}
public protocol UNWirePaymentViewSettingsProtocol {
  var isAutoFocus: Swift.Bool { get }
  var initialStageBackButton: Swift.Bool { get }
  var finalStageDoneButton: Swift.Bool { get }
}
public struct UNBillPayment : Swift.Codable {
  public let type: UNComponents.UNPaymentType
  public let id: Swift.String
  public let attributes: UNComponents.UNBillPayment.Attributes
  public let relationships: UNComponents.UNBillPayment.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let description: Swift.String
    public let status: UNComponents.UNPaymentStatus
    public let reason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBillPayment.Relationships.Account
    public let customer: UNComponents.UNBillPayment.Relationships.Customer?
    public let customers: UNComponents.UNBillPayment.Relationships.Customers?
    public let transaction: UNComponents.UNBillPayment.Relationships.Transaction?
    public let org: UNComponents.UNBillPayment.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPaymentAccount
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPaymentCustomer
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPaymentCustomer]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Transaction : Swift.Codable {
      public let data: UNComponents.UNPaymentTransaction
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNOrg
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNActivityComponentCallbacks = (_ callback: UNComponents.UNActivityComponentCallback) -> Swift.Void
public struct UNAdjustment : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNAdjustment.Attributes
  public let relationships: UNComponents.UNAdjustment.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNAdjustment.Relationships.Account
    public let customer: UNComponents.UNAdjustment.Relationships.Customer?
    public let customers: UNComponents.UNAdjustment.Relationships.Customers?
    public let org: UNComponents.UNAdjustment.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNAdjustment.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNAdjustment.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNAdjustment.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNAdjustment.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCardTransaction : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNCardTransaction.Attributes
  public let relationships: UNComponents.UNCardTransaction.Relationships
  public struct Attributes : Swift.Codable {
    public let cardNetwork: Swift.String
    public let cardLast4Digits: Swift.String
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let interchange: Swift.Double?
    public let networkTransactionId: Swift.String?
    public let richMerchantData: UNComponents.UNRichMerchantData?
    public let paymentMethod: Swift.String?
    public let merchant: UNComponents.UNMerchant?
    public let recurring: Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNCardTransaction.Relationships.Account
    public let customer: UNComponents.UNCardTransaction.Relationships.Customer?
    public let customers: UNComponents.UNCardTransaction.Relationships.Customers?
    public let org: UNComponents.UNCardTransaction.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNCardTransaction.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCardTransaction.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNCardTransaction.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCardTransaction.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNRepaidPaymentAdvance : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNRepaidPaymentAdvance.Attributes
  public let relationships: UNComponents.UNRepaidPaymentAdvance.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNRepaidPaymentAdvance.Relationships.Account
    public let customer: UNComponents.UNRepaidPaymentAdvance.Relationships.Customer?
    public let customers: UNComponents.UNRepaidPaymentAdvance.Relationships.Customers?
    public let org: UNComponents.UNRepaidPaymentAdvance.Relationships.Org?
    public let receivedPayment: UNComponents.UNRepaidPaymentAdvance.Relationships.ReceivedPayment?
    public let paymentAdvanceTransaction: UNComponents.UNRepaidPaymentAdvance.Relationships.PaymentAdvanceTransaction?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNRepaidPaymentAdvance.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNRepaidPaymentAdvance.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNRepaidPaymentAdvance.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNRepaidPaymentAdvance.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReceivedPayment : Swift.Codable {
      public let data: UNComponents.UNRepaidPaymentAdvance.Relationships.ReceivedPayment.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PaymentAdvanceTransaction : Swift.Codable {
      public let data: UNComponents.UNRepaidPaymentAdvance.Relationships.PaymentAdvanceTransaction.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNCreateCardComponentCallbacks = (_ callback: UNComponents.UNCreateCardComponentCallback) -> Swift.Void
public struct UNBankRepayment : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNBankRepayment.Attributes
  public let relationships: UNComponents.UNBankRepayment.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let paidForDate: Swift.String
    public let summary: Swift.String
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBankRepayment.Relationships.Account
    public let receivingAccount: UNComponents.UNBankRepayment.Relationships.ReceivingAccount
    public let customer: UNComponents.UNBankRepayment.Relationships.Customer?
    public let customers: UNComponents.UNBankRepayment.Relationships.Customers?
    public let org: UNComponents.UNBankRepayment.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBankRepayment.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReceivingAccount : Swift.Codable {
      public let data: UNComponents.UNBankRepayment.Relationships.ReceivingAccount.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBankRepayment.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNBankRepayment.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNBankRepayment.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCustomerRepayment : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNCustomerRepayment.Attributes
  public let relationships: UNComponents.UNCustomerRepayment.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNCustomerRepayment.Relationships.Account
    public let customer: UNComponents.UNCustomerRepayment.Relationships.Customer?
    public let customers: UNComponents.UNCustomerRepayment.Relationships.Customers?
    public let org: UNComponents.UNCustomerRepayment.Relationships.Org?
    public let payment: UNComponents.UNCustomerRepayment.Relationships.Payment?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNCustomerRepayment.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCustomerRepayment.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNCustomerRepayment.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCustomerRepayment.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Payment : Swift.Codable {
      public let data: UNComponents.UNCustomerRepayment.Relationships.Payment.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNAccount : Swift.Codable {
  case deposit(UNComponents.UNDepositAccount)
  case batch(UNComponents.UNBatchAccount)
  case credit(UNComponents.UNCreditAccount)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct UNDepositAccount : Swift.Codable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNDepositAccount.Attributes
  public let relationships: UNComponents.UNDepositAccount.Relationships
  public let included: [UNComponents.UNIndividual]?
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let name: Swift.String
    public let depositProduct: Swift.String
    public let routingNumber: Swift.String
    public let accountNumber: Swift.String?
    public let maskedAccountNumber: Swift.String?
    public let secondaryAccountNumber: UNComponents.UNDepositAccount.Attributes.SecondaryAccountNumber?
    public let balance: Swift.Double
    public let hold: Swift.Double
    public let reserve: Swift.Double?
    public let available: Swift.Double
    public let overdraftLimit: Swift.Double?
    public let currency: Swift.String
    public let tags: [Swift.String : Swift.String]
    public let status: UNComponents.UNAccountStatus
    public let closeReason: Swift.String?
    public let fraudReason: UNComponents.UNFraudReason?
    public let closeReasonText: Swift.String?
    public let freezeReason: Swift.String?
    public let isOverdrawnWithinLimit: Swift.Bool?
    public let bankDetails: UNComponents.UNBankDetails?
    public struct SecondaryAccountNumber : Swift.Codable {
      public let routingNumber: Swift.String
      public let accountNumber: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let customer: UNComponents.UNDepositAccount.Relationships.Customer?
    public let customers: UNComponents.UNDepositAccount.Relationships.Customers?
    public let org: UNComponents.UNDepositAccount.Relationships.Org
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNDepositAccount.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNDepositAccount.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNDepositAccount.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNBatchAccount : Swift.Codable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNBatchAccount.Attributes
  public let relationships: UNComponents.UNBatchAccount.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let name: Swift.String
    public let depositProduct: Swift.String
    public let routingNumber: Swift.String
    public let accountNumber: Swift.String?
    public let maskedAccountNumber: Swift.String?
    public let balance: Swift.Double
    public let hold: Swift.Double
    public let reserve: Swift.Double?
    public let available: Swift.Double
    public let currency: Swift.String
    public let status: UNComponents.UNAccountStatus
    public let closeReason: Swift.String?
    public let fraudReason: UNComponents.UNFraudReason?
    public let closeReasonText: Swift.String?
    public let freezeReason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let org: UNComponents.UNBatchAccount.Relationships.Org
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNBatchAccount.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCreditAccount : Swift.Codable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNCreditAccount.Attributes
  public let relationships: UNComponents.UNCreditAccount.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let updatedAt: Swift.String?
    public let name: Swift.String
    public let creditTerms: Swift.String
    public let balance: Swift.Double
    public let hold: Swift.Double
    public let reserve: Swift.Double?
    public let available: Swift.Double
    public let creditLimit: Swift.Double
    public let currency: Swift.String
    public let tags: [Swift.String : Swift.String]
    public let status: UNComponents.UNAccountStatus
    public let closeReason: UNComponents.UNCloseReason?
    public let fraudReason: UNComponents.UNFraudReason?
    public let closeReasonText: Swift.String?
    public let freezeReason: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let customer: UNComponents.UNCreditAccount.Relationships.Customer
    public let org: UNComponents.UNCreditAccount.Relationships.Org
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCreditAccount.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCreditAccount.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNAccountType : Swift.String, Swift.Codable {
  case depositAccount
  case batchAccount
  case creditAccount
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNBankDetails : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCloseReason : Swift.String, Swift.Codable {
  case fraud
  case byCustomer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNFraudReason : Swift.String, Swift.Codable {
  case achActivity
  case cardActivity
  case checkActivity
  case applicationHistory
  case accountActivity
  case clientIdentified
  case identityTheft
  case linkedToFraudulentCustomer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNAccountStatus : Swift.String, Swift.Codable {
  case closed
  case open
  case frozen
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class UNBookPaymentViewSettingsBuilder : UNComponents.UNBookPaymentViewSettingsProtocol {
  public var isAutoFocus: Swift.Bool {
    get
  }
  public var initialStageBackButton: Swift.Bool {
    get
  }
  public var finalStageDoneButton: Swift.Bool {
    get
  }
  public init(isAutoFocus: Swift.Bool = false, initialStageBackButton: Swift.Bool = false, finalStageDoneButton: Swift.Bool = false)
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNBookPaymentViewSettingsBuilder
  public func initialStageBackButton(_ initialStageBackButton: Swift.Bool) -> UNComponents.UNBookPaymentViewSettingsBuilder
  public func finalStageDoneButton(_ finalStageDoneButton: Swift.Bool) -> UNComponents.UNBookPaymentViewSettingsBuilder
  @objc deinit
}
public struct UNAuthorization : Swift.Codable {
  public let type: UNComponents.UNActivityType
  public let id: Swift.String
  public let attributes: UNComponents.UNAuthorizationAttributes
  public let relationships: UNComponents.UNAuthorizationRelationships
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAuthorizationAttributes : Swift.Codable {
  public let cardNetwork: Swift.String
  public let createdAt: Swift.String
  public let amount: UNComponents.UNCents
  public let cardLast4Digits: Swift.String
  public let merchant: UNComponents.UNMerchant
  public let recurring: Swift.Bool
  public let summary: Swift.String
  public let richMerchantData: UNComponents.UNRichMerchantData?
  public let paymentMethod: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNAuthorizationRelationships : Swift.Codable {
  public let account: UNComponents.UNAuthorizationRelationships.Account
  public let customer: UNComponents.UNAuthorizationRelationships.Customer?
  public struct Account : Swift.Codable {
    public let data: UNComponents.UNAuthorizationRelationships.Account.Data
    public struct Data : Swift.Codable {
      public let type: Swift.String
      public let id: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Customer : Swift.Codable {
    public let data: UNComponents.UNAuthorizationRelationships.Customer.Data
    public struct Data : Swift.Codable {
      public let type: Swift.String
      public let id: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNInterest : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNInterest.Attributes
  public let relationships: UNComponents.UNInterest.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNInterest.Relationships.Account
    public let customer: UNComponents.UNInterest.Relationships.Customer?
    public let customers: UNComponents.UNInterest.Relationships.Customers?
    public let org: UNComponents.UNInterest.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNInterest.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNInterest.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNInterest.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNInterest.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCodeablePlaidLinkTokenAttributes : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNVisaProviding {
  func initialize(completion: @escaping UNComponents.UNVisaInitializationCompletion)
  func getSupportedWallets(for payload: Swift.String, completion: @escaping UNComponents.UNVisaSupportedWalletsCompletion)
  func startCardProvisioning(for walletName: Swift.String, in vc: UIKit.UIViewController, completion: @escaping UNComponents.UNVisaCardProvisioningCompletion)
}
public typealias UNVisaInitializationCompletion = (_ signedNonce: Swift.String?, _ error: UNComponents.UNVPError?) -> Swift.Void
public typealias UNVisaSupportedWalletsCompletion = (_ wallets: [UNComponents.UNVPSupportedWallet]?, _ error: UNComponents.UNVPError?) -> Swift.Void
public typealias UNVisaCardProvisioningCompletion = (_ response: UNComponents.UNVPCardProvisioningResponse?, _ error: UNComponents.UNVPError?) -> Swift.Void
public typealias UNCustomerToken = Swift.String
public typealias UNComponentsTheme = Swift.String
public typealias UNComponentsLanguage = Swift.String
public protocol UNBookPaymentView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var counterpartyName: Swift.String? { get set }
  var counterpartyAccountId: Swift.String? { get set }
  var isSameCustomer: Swift.Bool { get set }
  var additionalSetting: any UNComponents.UNBookPaymentViewSettingsProtocol { get set }
}
public protocol UNBookPaymentViewSettingsProtocol {
  var isAutoFocus: Swift.Bool { get }
  var initialStageBackButton: Swift.Bool { get }
  var finalStageDoneButton: Swift.Bool { get }
}
public struct UNBook : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNBook.Attributes
  public let relationships: UNComponents.UNBook.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let counterparty: UNComponents.UNTransactionCounterparty
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBook.Relationships.Account
    public let customer: UNComponents.UNBook.Relationships.Customer?
    public let customers: UNComponents.UNBook.Relationships.Customers?
    public let org: UNComponents.UNBook.Relationships.Org?
    public let counterpartyAccount: UNComponents.UNBook.Relationships.CounterpartyAccount?
    public let counterpartyCustomer: UNComponents.UNBook.Relationships.CounterpartyCustomer?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBook.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBook.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNBook.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNBook.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CounterpartyAccount : Swift.Codable {
      public let data: UNComponents.UNBook.Relationships.CounterpartyAccount.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CounterpartyCustomer : Swift.Codable {
      public let data: UNComponents.UNBook.Relationships.CounterpartyCustomer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNACHCreditComponentCallbacks = (_ callback: UNComponents.UNACHCreditComponentCallback) -> Swift.Void
public struct UNBillPay : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNBillPay.Attributes
  public let relationships: UNComponents.UNBillPay.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNBillPay.Relationships.Account
    public let customer: UNComponents.UNBillPay.Relationships.Customer?
    public let customers: UNComponents.UNBillPay.Relationships.Customers?
    public let org: UNComponents.UNBillPay.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNBillPay.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNBillPay.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNBillPay.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNBillPay.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNAccountView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  var additionalSetting: any UNComponents.UNAccountViewSettingsProtocol { get set }
  func openActionsMenu()
  func open(action: UNComponents.UNAccountMenuAction)
  func refresh()
}
public protocol UNAccountViewSettingsProtocol {
  var hideActionsMenuButton: Swift.Bool { get }
  var hideSelectionMenuButton: Swift.Bool { get }
  var menuItems: [UNComponents.UNAccountComponentMenuItems]? { get }
  var showLeftToSpend: Swift.Bool { get }
  var hideAccountStatus: Swift.Bool { get }
  var hideAccountDetails: Swift.Bool { get }
  var hideAccountCtaBanner: Swift.Bool { get }
  var hideAccountButtons: Swift.Bool { get }
  var enableFundAccountButton: Swift.Bool { get }
  var enablePaySomeoneAccountButton: Swift.Bool { get }
  var accountStatusPosition: UNComponents.UNAccountStatusPosition? { get }
}
public struct UNWire : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNWire.Attributes
  public let relationships: UNComponents.UNWire.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let counterparty: UNComponents.UNTransactionCounterparty
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNWire.Relationships.Account
    public let customer: UNComponents.UNWire.Relationships.Customer?
    public let customers: UNComponents.UNWire.Relationships.Customers?
    public let org: UNComponents.UNWire.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNWire.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNWire.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNWire.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNWire.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNComponentsEnvironment : Swift.Codable {
  case sandbox
  case production
  case mock
  public static func == (a: UNComponents.UNComponentsEnvironment, b: UNComponents.UNComponentsEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNWirePayment : Swift.Codable {
  public let type: UNComponents.UNPaymentType
  public let id: Swift.String
  public let attributes: UNComponents.UNWirePayment.Attributes
  public let relationships: UNComponents.UNWirePayment.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let description: Swift.String
    public let status: UNComponents.UNPaymentStatus
    public let counterparty: UNComponents.UNWirePayment.Attributes.Counterparty
    public let reason: Swift.String?
    public let tags: [Swift.String : Swift.String]?
    public struct Counterparty : Swift.Codable {
      public let name: Swift.String
      public let routingNumber: Swift.String
      public let accountNumber: Swift.String
      public let address: UNComponents.UNAddress
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNWirePayment.Relationships.Account
    public let customer: UNComponents.UNWirePayment.Relationships.Customer?
    public let customers: UNComponents.UNWirePayment.Relationships.Customers?
    public let transaction: UNComponents.UNWirePayment.Relationships.Transaction?
    public let counterpartyAccount: UNComponents.UNWirePayment.Relationships.CounterpartyAccount?
    public let org: UNComponents.UNWirePayment.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPaymentAccount
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPaymentCustomer
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPaymentCustomer]
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Transaction : Swift.Codable {
      public let data: UNComponents.UNPaymentTransaction
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CounterpartyAccount : Swift.Codable {
      public let data: UNComponents.UNWirePayment.Relationships.CounterpartyAccount.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNOrg
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNACHCreditOnLoadResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNDisputeSettlement : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNDisputeSettlement.Attributes
  public let relationships: UNComponents.UNDisputeSettlement.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNDisputeSettlement.Relationships.Account
    public let customer: UNComponents.UNDisputeSettlement.Relationships.Customer?
    public let customers: UNComponents.UNDisputeSettlement.Relationships.Customers?
    public let org: UNComponents.UNDisputeSettlement.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNDisputeSettlement.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNDisputeSettlement.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNDisputeSettlement.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNDisputeSettlement.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNDishonoredAch : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNDishonoredAch.Attributes
  public let relationships: UNComponents.UNDishonoredAch.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let description: Swift.String
    public let summary: Swift.String
    public let companyName: Swift.String
    public let counterpartyName: Swift.String
    public let counterpartyRoutingNumber: Swift.String
    public let traceNumber: Swift.String
    public let returnReason: Swift.String
    public let secCode: Swift.String
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNDishonoredAch.Relationships.Account
    public let customer: UNComponents.UNDishonoredAch.Relationships.Customer?
    public let customers: UNComponents.UNDishonoredAch.Relationships.Customers?
    public let org: UNComponents.UNDishonoredAch.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNDishonoredAch.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNDishonoredAch.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNDishonoredAch.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNDishonoredAch.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNACHDebitComponentCallbacks = (_ callback: UNComponents.UNACHDebitComponentCallback) -> Swift.Void
public enum UNWirePaymentComponentCallback {
  case unitOnLoad(result: Swift.Result<[UNComponents.UNAccount], UNComponents.UNComponentsError>)
  case paymentCreated(data: UNComponents.UNWirePayment)
  case initialStageBackButtonClicked
  case finalStageDoneButtonClicked
}
public class UNMultipleCardsViewSettingsBuilder : UNComponents.UNMultipleCardsViewSettingsProtocol {
  public var paginationType: UNComponents.UNMultipleCardsComponentPaginationType {
    get
  }
  public var cardsPerPage: Swift.Int? {
    get
  }
  public var disableCardClick: Swift.Bool {
    get
  }
  public var hideTitle: Swift.Bool {
    get
  }
  public var hideBackToTop: Swift.Bool {
    get
  }
  public var queryFilter: Swift.String? {
    get
  }
  public var showSeeAllCardsLink: Swift.Bool {
    get
  }
  public var isRowItemClickable: Swift.Bool {
    get
  }
  public init(paginationType: UNComponents.UNMultipleCardsComponentPaginationType = .infiniteScroll, cardsPerPage: Swift.Int? = nil, disableCardClick: Swift.Bool = false, hideTitle: Swift.Bool = false, hideBackToTop: Swift.Bool = false, queryFilter: Swift.String? = nil, showSeeAllCardsLink: Swift.Bool = false, isRowItemClickable: Swift.Bool = false)
  public func paginationType(_ paginationType: UNComponents.UNMultipleCardsComponentPaginationType) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func cardsPerPage(_ cardsPerPage: Swift.Int) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func disableCardClick(_ disableCardClick: Swift.Bool) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func hideTitle(_ hideTitle: Swift.Bool) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func hideBackToTop(_ hideBackToTop: Swift.Bool) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func queryFilter(_ queryFilter: Swift.String) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func showSeeAllCardsLink(_ showSeeAllCardsLink: Swift.Bool) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  public func isRowItemClickable(_ isRowItemClickable: Swift.Bool) -> UNComponents.UNMultipleCardsViewSettingsBuilder
  @objc deinit
}
public protocol UNProgramDetailsView : UIKit.UIView {
  var accountId: Swift.String { get set }
}
public protocol UNProgramDetailsViewSettingsProtocol {
  var hideTitle: Swift.Bool { get }
}
public struct UNOriginatedAch : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNOriginatedAch.Attributes
  public let relationships: UNComponents.UNOriginatedAch.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let description: Swift.String
    public let counterparty: UNComponents.UNTransactionCounterparty
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNOriginatedAch.Relationships.Account
    public let customer: UNComponents.UNOriginatedAch.Relationships.Customer?
    public let customers: UNComponents.UNOriginatedAch.Relationships.Customers?
    public let org: UNComponents.UNOriginatedAch.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNOriginatedAch.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNOriginatedAch.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNOriginatedAch.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNOriginatedAch.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNCheckDepositComponentCallbacks = (_ callback: UNComponents.UNCheckDepositComponentCallback) -> Swift.Void
public struct UNACHDebitOnLoadResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNChargeback : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNChargeback.Attributes
  public let relationships: UNComponents.UNChargeback.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let counterparty: UNComponents.UNTransactionCounterparty
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNChargeback.Relationships.Account
    public let customer: UNComponents.UNChargeback.Relationships.Customer?
    public let customers: UNComponents.UNChargeback.Relationships.Customers?
    public let org: UNComponents.UNChargeback.Relationships.Org?
    public let chargeback: UNComponents.UNChargeback.Relationships.Chargeback
    public let receiverAccount: UNComponents.UNChargeback.Relationships.ReceiverAccount
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNChargeback.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNChargeback.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNChargeback.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNChargeback.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Chargeback : Swift.Codable {
      public let data: UNComponents.UNChargeback.Relationships.Chargeback.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReceiverAccount : Swift.Codable {
      public let data: UNComponents.UNChargeback.Relationships.ReceiverAccount.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias UNProgramDetailsComponentCallbacks = (_ callback: UNComponents.UNProgramDetailsComponentCallback) -> Swift.Void
public struct UNComponentResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNComponentArrayResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNComponentsErrorResponse : Swift.Codable {
  public let status: Swift.String
  public let title: Swift.String
  public let detail: Swift.String?
  public let details: Swift.String?
  public let meta: UNComponents.UNComponentsErrorResponse.Meta?
  public struct Meta : Swift.Codable {
    public let supportId: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNSponsoredInterest : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNSponsoredInterest.Attributes
  public let relationships: UNComponents.UNSponsoredInterest.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNSponsoredInterest.Relationships.Account
    public let customer: UNComponents.UNSponsoredInterest.Relationships.Customer?
    public let customers: UNComponents.UNSponsoredInterest.Relationships.Customers?
    public let org: UNComponents.UNSponsoredInterest.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNSponsoredInterest.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNSponsoredInterest.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNSponsoredInterest.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNSponsoredInterest.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNWebVersioningStrategy {
  case latest
  case exact(major: Swift.Int, minor: Swift.Int, patch: Swift.Int)
  case upToNextMinor(major: Swift.Int, minor: Swift.Int)
  case upToNextMajor(major: Swift.Int)
}
public struct UNPaymentCanceled : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNPaymentCanceled.Attributes
  public let relationships: UNComponents.UNPaymentCanceled.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNPaymentCanceled.Relationships.Account
    public let customer: UNComponents.UNPaymentCanceled.Relationships.Customer?
    public let customers: UNComponents.UNPaymentCanceled.Relationships.Customers?
    public let org: UNComponents.UNPaymentCanceled.Relationships.Org?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNPaymentCanceled.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNPaymentCanceled.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNPaymentCanceled.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNPaymentCanceled.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNTransaction : Swift.Codable {
  case atm(UNComponents.UNAtm)
  case adjustment(UNComponents.UNAdjustment)
  case billPay(UNComponents.UNBillPay)
  case book(UNComponents.UNBook)
  case card(UNComponents.UNCardTransaction)
  case cardReversal(UNComponents.UNCardReversal)
  case chargeback(UNComponents.UNChargeback)
  case checkDeposit(UNComponents.UNCheckDeposit)
  case dishonoredACH(UNComponents.UNDishonoredAch)
  case dispute(UNComponents.UNDispute)
  case disputeSettlement(UNComponents.UNDisputeSettlement)
  case fee(UNComponents.UNFee)
  case feeReversal(UNComponents.UNFeeReversal)
  case interchangeShare(UNComponents.UNInterchangeShare)
  case interest(UNComponents.UNInterest)
  case interestShare(UNComponents.UNInterestShare)
  case negativeBalanceCoverage(UNComponents.UNNegativeBalanceCoverage)
  case originatedACH(UNComponents.UNOriginatedAch)
  case paymentAdvance(UNComponents.UNPaymentAdvance)
  case paymentCanceled(UNComponents.UNPaymentCanceled)
  case purchase(UNComponents.UNPurchase)
  case receivedACH(UNComponents.UNReceivedAch)
  case release(UNComponents.UNRelease)
  case repaidPaymentAdvance(UNComponents.UNRepaidPaymentAdvance)
  case returnedACH(UNComponents.UNReturnedAch)
  case returnedCheckDeposit(UNComponents.UNReturnedCheckDeposit)
  case returnedReceivedACH(UNComponents.UNReturnedReceivedAch)
  case reward(UNComponents.UNReward)
  case settlement(UNComponents.UNSettlement)
  case sponsoredInterest(UNComponents.UNSponsoredInterest)
  case wire(UNComponents.UNWire)
  case accountLowBalanceClosure(UNComponents.UNAccountLowBalanceClosure)
  case cashDeposit(UNComponents.UNCashDepositTransaction)
  case bankRepayment(UNComponents.UNBankRepayment)
  case customerRepayment(UNComponents.UNCustomerRepayment)
  case customerRepaymentReturned(UNComponents.UNCustomerRepaymentReturned)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum UNTransactionTypes : Swift.String, Swift.Codable {
  case atm
  case adjustment
  case billPay
  case book
  case card
  case cardReversal
  case chargeback
  case checkDeposit
  case dishonoredACH
  case dispute
  case disputeSettlement
  case fee
  case feeReversal
  case interchangeShare
  case interest
  case interestShare
  case negativeBalanceCoverage
  case originatedACH
  case paymentAdvance
  case paymentCanceled
  case purchase
  case receivedACH
  case release
  case repaidPaymentAdvance
  case returnedACH
  case returnedCheckDeposit
  case returnedReceivedACH
  case reward
  case settlement
  case sponsoredInterest
  case wire
  case accountLowBalanceClosure
  case cashDeposit
  case bankRepayment
  case customerRepayment
  case customerRepaymentReturned
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNTransactionCounterparty : Swift.Codable {
  public let name: Swift.String
  public let accountNumber: Swift.String
  public let routingNumber: Swift.String
  public let accountType: UNComponents.UNCounterpartyAccountType
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNRichMerchantData : Swift.Codable {
  public let name: Swift.String
  public let website: Swift.String?
  public let logo: Swift.String?
  public let phone: Swift.String?
  public let categories: [UNComponents.UNRichMerchantData.Categories]?
  public let address: UNComponents.UNRichMerchantDataAddress?
  public let coordinates: UNComponents.UNRichMerchantData.Coordinates?
  public struct Categories : Swift.Codable {
    public let name: Swift.String
    public let icon: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Coordinates : Swift.Codable {
    public let longitude: Swift.Double
    public let latitude: Swift.Double
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNRichMerchantDataAddress : Swift.Codable {
  public let city: Swift.String
  public let state: Swift.String
  public let country: Swift.String
  public let street: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNMerchant : Swift.Codable {
  public let name: Swift.String?
  public let type: Swift.Double?
  public let category: Swift.String?
  public let location: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNReward : Swift.Codable {
  public let type: UNComponents.UNTransactionTypes
  public let id: Swift.String
  public let attributes: UNComponents.UNReward.Attributes
  public let relationships: UNComponents.UNReward.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let amount: UNComponents.UNCents
    public let direction: UNComponents.UNDirection
    public let balance: UNComponents.UNCents
    public let summary: Swift.String
    public let counterparty: UNComponents.UNTransactionCounterparty
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNReward.Relationships.Account
    public let customer: UNComponents.UNReward.Relationships.Customer?
    public let customers: UNComponents.UNReward.Relationships.Customers?
    public let org: UNComponents.UNReward.Relationships.Org?
    public let reward: UNComponents.UNReward.Relationships.Reward
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNReward.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNReward.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNReward.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNReward.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Reward : Swift.Codable {
      public let data: UNComponents.UNReward.Relationships.Reward.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNComponentsUI {
  func setTheme(_ theme: UNComponents.UNComponentsTheme?)
  func setLanguage(_ language: UNComponents.UNComponentsLanguage?)
  func setFonts(_ fonts: UNComponents.UNComponentsFonts?)
  var views: any UNComponents.UNComponentsUIViews { get }
  var flows: any UNComponents.UNComponentsUIFlows { get }
  var theme: UNComponents.UNComponentsTheme? { get }
  var language: UNComponents.UNComponentsLanguage? { get }
  var fonts: UNComponents.UNComponentsFonts? { get }
}
public protocol UNComponentsAuthentication {
  func cleanUserData()
}
@_hasMissingDesignatedInitializers public class UnitComponentsSDK {
  public static var version: Swift.String
  public static let manager: any UNComponents.UNComponentsManagerProtocol
  @objc deinit
}
public struct UNCheckDeposit : Swift.Codable {
  public let id: Swift.String
  public let type: UNComponents.UNActivityType
  public let attributes: UNComponents.UNCheckDeposit.Attributes
  public let relationships: UNComponents.UNCheckDeposit.Relationships
  public struct Attributes : Swift.Codable {
    public let createdAt: Swift.String
    public let status: UNComponents.UNCheckDepositStatus
    public let reason: Swift.String?
    public let reasonText: Swift.String?
    public let description: Swift.String
    public let amount: UNComponents.UNCents
    public let vendor: UNComponents.UNCheckDepositVendors?
    public let checkNumber: Swift.String?
    public let counterparty: UNComponents.UNCheckCounterparty?
    public let frontImage: Swift.String?
    public let backImage: Swift.String?
    public let settlementDate: Swift.String?
    public let statusCreatedAt: Swift.String?
    public let statusSetBy: Swift.String?
    public let statusHistory: [UNComponents.UNStatusEvent]?
    public let tags: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Relationships : Swift.Codable {
    public let account: UNComponents.UNCheckDeposit.Relationships.Account
    public let customer: UNComponents.UNCheckDeposit.Relationships.Customer?
    public let customers: UNComponents.UNCheckDeposit.Relationships.Customers?
    public let org: UNComponents.UNCheckDeposit.Relationships.Org?
    public let transaction: UNComponents.UNCheckDeposit.Relationships.Transaction?
    public struct Account : Swift.Codable {
      public let data: UNComponents.UNCheckDeposit.Relationships.Account.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customer : Swift.Codable {
      public let data: UNComponents.UNCheckDeposit.Relationships.Customer.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Customers : Swift.Codable {
      public let data: [UNComponents.UNCheckDeposit.Relationships.Customers.Data]
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Org : Swift.Codable {
      public let data: UNComponents.UNCheckDeposit.Relationships.Org.Data
      public struct Data : Swift.Codable {
        public let type: Swift.String
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Transaction : Swift.Codable {
      public let data: UNComponents.UNCheckDeposit.Relationships.Transaction.Data
      public struct Data : Swift.Codable {
        public let type: UNComponents.UNActivityType
        public let id: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UNCheckCounterparty : Swift.Codable {
  public let name: Swift.String
  public let routingNumber: Swift.String
  public let accountNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum UNCheckDepositStatus : Swift.String, Swift.Codable {
  case awaitingImages
  case awaitingFrontImage
  case awaitingBackImage
  case pendingReview
  case awaitingCustomerConfirmation
  case pending
  case rejected
  case clearing
  case sent
  case canceled
  case returned
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCheckDepositVendors : Swift.String, Swift.Codable {
  case Ensenta
  case Smartpay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNStatusEvent : Swift.Codable {
  public var status: [Swift.String : Any] {
    get
  }
  public let updatedAt: Swift.String
  public let updatedBy: Swift.String?
  public init(status: [Swift.String : Any], updatedAt: Swift.String, updatedBy: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol UNCardView : UIKit.UIView {
  var cardId: Swift.String { get set }
  var additionalSetting: any UNComponents.UNCardViewSettingsProtocol { get set }
  func openActionsMenu()
  func open(action: UNComponents.UNCardMenuAction)
  func showSensitiveData()
  func hideSensitiveData()
}
public protocol UNCardViewSettingsProtocol {
  var hideActionsMenuButton: Swift.Bool { get }
  var hideCardTitle: Swift.Bool { get }
  var hideSensitiveDataButton: Swift.Bool { get }
  var enablePushProvisioning: Swift.Bool { get }
  var learnMoreUrl: Swift.String { get }
  var menuItems: [UNComponents.UNCardComponentMenuItems]? { get }
  var fee: Swift.Double? { get }
  var showCardTypeSubtitle: Swift.Bool { get }
  var showCardHolderSubtitle: Swift.Bool { get }
}
extension UNComponents.UNCardComponentMenuItems : Swift.Equatable {}
extension UNComponents.UNCardComponentMenuItems : Swift.Hashable {}
extension UNComponents.UNCardComponentMenuItems : Swift.RawRepresentable {}
extension UNComponents.UNCardMenuAction : Swift.Equatable {}
extension UNComponents.UNCardMenuAction : Swift.Hashable {}
extension UNComponents.UNCardMenuAction : Swift.RawRepresentable {}
extension UNComponents.UNActivityType : Swift.Equatable {}
extension UNComponents.UNActivityType : Swift.Hashable {}
extension UNComponents.UNActivityType : Swift.RawRepresentable {}
extension UNComponents.UNCounterpartyPermission : Swift.Equatable {}
extension UNComponents.UNCounterpartyPermission : Swift.Hashable {}
extension UNComponents.UNCounterpartyPermission : Swift.RawRepresentable {}
extension UNComponents.UNCounterpartyAccountType : Swift.Equatable {}
extension UNComponents.UNCounterpartyAccountType : Swift.Hashable {}
extension UNComponents.UNCounterpartyAccountType : Swift.RawRepresentable {}
extension UNComponents.UNCounterpartyType : Swift.Equatable {}
extension UNComponents.UNCounterpartyType : Swift.Hashable {}
extension UNComponents.UNCounterpartyType : Swift.RawRepresentable {}
extension UNComponents.UNConnectedAccountStatus : Swift.Equatable {}
extension UNComponents.UNConnectedAccountStatus : Swift.Hashable {}
extension UNComponents.UNConnectedAccountStatus : Swift.RawRepresentable {}
extension UNComponents.UNConnectionAccountType : Swift.Equatable {}
extension UNComponents.UNConnectionAccountType : Swift.Hashable {}
extension UNComponents.UNConnectionAccountType : Swift.RawRepresentable {}
extension UNComponents.UNAccountComponentMenuItems : Swift.Equatable {}
extension UNComponents.UNAccountComponentMenuItems : Swift.Hashable {}
extension UNComponents.UNAccountComponentMenuItems : Swift.RawRepresentable {}
extension UNComponents.UNAccountStatusPosition : Swift.Equatable {}
extension UNComponents.UNAccountStatusPosition : Swift.Hashable {}
extension UNComponents.UNAccountStatusPosition : Swift.RawRepresentable {}
extension UNComponents.UNMultipleCardsComponentPaginationType : Swift.Equatable {}
extension UNComponents.UNMultipleCardsComponentPaginationType : Swift.Hashable {}
extension UNComponents.UNMultipleCardsComponentPaginationType : Swift.RawRepresentable {}
extension UNComponents.UNCustomerType : Swift.Equatable {}
extension UNComponents.UNCustomerType : Swift.Hashable {}
extension UNComponents.UNCustomerType : Swift.RawRepresentable {}
extension UNComponents.UNCustomerStatus : Swift.Equatable {}
extension UNComponents.UNCustomerStatus : Swift.Hashable {}
extension UNComponents.UNCustomerStatus : Swift.RawRepresentable {}
extension UNComponents.UNArchiveReason : Swift.Equatable {}
extension UNComponents.UNArchiveReason : Swift.Hashable {}
extension UNComponents.UNArchiveReason : Swift.RawRepresentable {}
extension UNComponents.UNAccountMenuAction : Swift.Equatable {}
extension UNComponents.UNAccountMenuAction : Swift.Hashable {}
extension UNComponents.UNAccountMenuAction : Swift.RawRepresentable {}
extension UNComponents.UNSupportType : Swift.Equatable {}
extension UNComponents.UNSupportType : Swift.Hashable {}
extension UNComponents.UNSupportType : Swift.RawRepresentable {}
extension UNComponents.UNRiskRate : Swift.Equatable {}
extension UNComponents.UNRiskRate : Swift.Hashable {}
extension UNComponents.UNRiskRate : Swift.RawRepresentable {}
extension UNComponents.UNCreateCardType : Swift.Equatable {}
extension UNComponents.UNCreateCardType : Swift.Hashable {}
extension UNComponents.UNCreateCardType : Swift.RawRepresentable {}
extension UNComponents.FontWeight : Swift.Equatable {}
extension UNComponents.FontWeight : Swift.Hashable {}
extension UNComponents.UNActivityComponentPaginationType : Swift.Equatable {}
extension UNComponents.UNActivityComponentPaginationType : Swift.Hashable {}
extension UNComponents.UNActivityComponentPaginationType : Swift.RawRepresentable {}
extension UNComponents.UNCardType : Swift.Equatable {}
extension UNComponents.UNCardType : Swift.Hashable {}
extension UNComponents.UNCardType : Swift.RawRepresentable {}
extension UNComponents.UNCardStatus : Swift.Equatable {}
extension UNComponents.UNCardStatus : Swift.Hashable {}
extension UNComponents.UNCardStatus : Swift.RawRepresentable {}
extension UNComponents.UNPaymentType : Swift.Equatable {}
extension UNComponents.UNPaymentType : Swift.Hashable {}
extension UNComponents.UNPaymentType : Swift.RawRepresentable {}
extension UNComponents.UNPaymentStatus : Swift.Equatable {}
extension UNComponents.UNPaymentStatus : Swift.Hashable {}
extension UNComponents.UNPaymentStatus : Swift.RawRepresentable {}
extension UNComponents.UNDirection : Swift.Equatable {}
extension UNComponents.UNDirection : Swift.Hashable {}
extension UNComponents.UNDirection : Swift.RawRepresentable {}
extension UNComponents.UNPaymentAccountType : Swift.Equatable {}
extension UNComponents.UNPaymentAccountType : Swift.Hashable {}
extension UNComponents.UNPaymentAccountType : Swift.RawRepresentable {}
extension UNComponents.UNPlaidAccountFilter : Swift.Equatable {}
extension UNComponents.UNPlaidAccountFilter : Swift.Hashable {}
extension UNComponents.UNPlaidAccountFilter : Swift.RawRepresentable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.Equatable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.Hashable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.RawRepresentable {}
extension UNComponents.UNVPErrorType : Swift.Equatable {}
extension UNComponents.UNVPErrorType : Swift.Hashable {}
extension UNComponents.UNVPProvisionStatus : Swift.Equatable {}
extension UNComponents.UNVPProvisionStatus : Swift.Hashable {}
extension UNComponents.UNAccountType : Swift.Equatable {}
extension UNComponents.UNAccountType : Swift.Hashable {}
extension UNComponents.UNAccountType : Swift.RawRepresentable {}
extension UNComponents.UNCloseReason : Swift.Equatable {}
extension UNComponents.UNCloseReason : Swift.Hashable {}
extension UNComponents.UNCloseReason : Swift.RawRepresentable {}
extension UNComponents.UNFraudReason : Swift.Equatable {}
extension UNComponents.UNFraudReason : Swift.Hashable {}
extension UNComponents.UNFraudReason : Swift.RawRepresentable {}
extension UNComponents.UNAccountStatus : Swift.Equatable {}
extension UNComponents.UNAccountStatus : Swift.Hashable {}
extension UNComponents.UNAccountStatus : Swift.RawRepresentable {}
extension UNComponents.UNComponentsEnvironment : Swift.Equatable {}
extension UNComponents.UNComponentsEnvironment : Swift.Hashable {}
extension UNComponents.UNTransactionTypes : Swift.Equatable {}
extension UNComponents.UNTransactionTypes : Swift.Hashable {}
extension UNComponents.UNTransactionTypes : Swift.RawRepresentable {}
extension UNComponents.UNCheckDepositStatus : Swift.Equatable {}
extension UNComponents.UNCheckDepositStatus : Swift.Hashable {}
extension UNComponents.UNCheckDepositStatus : Swift.RawRepresentable {}
extension UNComponents.UNCheckDepositVendors : Swift.Equatable {}
extension UNComponents.UNCheckDepositVendors : Swift.Hashable {}
extension UNComponents.UNCheckDepositVendors : Swift.RawRepresentable {}
