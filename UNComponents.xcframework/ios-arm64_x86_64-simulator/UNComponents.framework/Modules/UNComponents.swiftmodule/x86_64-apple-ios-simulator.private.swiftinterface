// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UNComponents
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Dispatch
import Foundation
import LinkKit
import MobileCoreServices
import PassKit
import RxCocoa
import RxSwift
import SafariServices
import Swift
import SystemConfiguration
import UIKit
@_exported import UNComponents
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
public enum UNCardComponentCallback {
  case cardStatusChanged(card: UNComponents.UNCardData)
  case cardActivated(card: UNComponents.UNCardData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNCardData, UNComponents.UNError>)
}
public enum UNCardMenuAction : Swift.String {
  case freeze
  case managePin
  case replace
  case report
  case close
  case activate
  case unfreeze
  case changePin
  case setPin
  case addToWallet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias UNCardComponentCallbacks = (_ callback: UNComponents.UNCardComponentCallback) -> Swift.Void
public enum UNACHCreditComponentCallback {
  case onPaymentCreated(data: UNComponents.UNACHData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNACHCreditOnLoadResponse, UNComponents.UNError>)
}
public struct UNCounterpartyAccountData : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public let attributes: UNComponents.UNCounterpartyAccountAttributes
  public let relationships: UNComponents.UNAccountRelationships
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNCounterpartyAccountAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let updatedAt: Swift.String?
  public let name: Swift.String
  public let routingNumber: Swift.String?
  public let accountNumber: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) public class UNACHDebitComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(accountId: Swift.String, additionalSettings: UNComponents.UNACHDebitViewSettingsProtocol, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNACHDebitComponentCallbacks?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UNComponents.UNACHDebitComponent : UNComponents.UNACHDebitView {
  @_Concurrency.MainActor(unsafe) public var accountId: Swift.String {
    get
    set(newAccountId)
  }
  @_Concurrency.MainActor(unsafe) public var additionalSettings: UNComponents.UNACHDebitViewSettingsProtocol {
    get
    set(newAdditionalSettings)
  }
}
public protocol UNActivityView : UIKit.UIView {
  var accountId: Swift.String? { get set }
}
public protocol UNActivityViewSettingsProtocol {
  var hideFilterButton: Swift.Bool { get }
}
public protocol UNServices {
  func setVisaProvider(_ provider: UNComponents.UNVisaProviding)
}
public enum UNAccountComponentCallback {
  case unitOnLoad(result: Swift.Result<[UNComponents.UNAccountData], UNComponents.UNError>)
  case onAccountChange(account: UNComponents.UNAccountData)
}
public class UNAccountViewSettingsBuilder : UNComponents.UNAccountViewSettingsProtocol {
  public var hideActionsMenuButton: Swift.Bool {
    get
  }
  public var hideSelectionMenuButton: Swift.Bool {
    get
  }
  public init(hideActionsMenuButton: Swift.Bool = false, hideSelectionMenuButton: Swift.Bool = false)
  public func hideActionsMenuButton(_ hideActionsMenuButton: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  public func hideSelectionMenuButton(_ hideSelectionMenuButton: Swift.Bool) -> UNComponents.UNAccountViewSettingsBuilder
  @objc deinit
}
public enum UNError : Swift.Error {
  case onLoad(errors: [UNComponents.UNErrorResponse])
  case missingCustomerToken
  case missingEnvironment
  case missingVisaProvider
  public var description: Swift.String {
    get
  }
}
public class UNACHDebitViewSettingsBuilder : UNComponents.UNACHDebitViewSettingsProtocol {
  public var fee: Swift.Double? {
    get
  }
  public var isAutoFocus: Swift.Bool {
    get
  }
  public var sameDay: Swift.Bool {
    get
  }
  public init(fee: Swift.Double? = nil, isAutoFocus: Swift.Bool = false, sameDay: Swift.Bool = false)
  public func fee(_ fee: Swift.Double) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  public func sameDay(_ sameDay: Swift.Bool) -> UNComponents.UNACHDebitViewSettingsBuilder
  @objc deinit
}
public struct UNCheckCounterparty : Swift.Codable {
  public let name: Swift.String
  public let routingNumber: Swift.String
  public let accountNumber: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UNCheckStatus : Swift.String, Swift.Codable {
  case awaitingImages
  case awaitingFrontImage
  case awaitingBackImage
  case pending
  case pendingReview
  case rejected
  case clearing
  case sent
  case canceled
  case returned
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNACHData : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public let details: UNComponents.UNACHAttributes
  public let relationships: UNComponents.UNACHRelationships
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHCreditOnLoadResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHDebitOnLoadResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let status: UNComponents.UNPaymentStatus
  public let settlementDate: Swift.String?
  public let reason: Swift.String?
  public let direction: UNComponents.UNDirection
  public let description: Swift.String
  public let transactionSummaryOverride: Swift.String?
  public let amount: Swift.Int
  public let tags: UNComponents.UNTags?
  public let addenda: Swift.String?
  public let counterparty: UNComponents.UNAchCounterparty
  public let expectedCompletionDate: Swift.String?
  public let counterpartyVerificationMethod: UNComponents.UNCounterpartyVerificationMethod?
  public let sameDay: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNAchCounterparty : Swift.Codable {
  public let name: Swift.String
  public let accountNumber: Swift.String
  public let routingNumber: Swift.String
  public let accountType: UNComponents.UNPaymentAccountType
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNACHRelationships : Swift.Codable {
  public let account: UNComponents.UNRelationshipData?
  public let customer: UNComponents.UNRelationshipData?
  public let customers: UNComponents.UNRelationshipDataArray
  public let transaction: UNComponents.UNRelationshipData?
  public let counterparty: UNComponents.UNRelationshipData?
  public let recurringPayment: UNComponents.UNRelationshipData?
  public let org: UNComponents.UNRelationshipData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNUIFlows {
  func startPushProvisioning(for cardId: Swift.String, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?)
}
extension UNComponents.UNUIFlows {
  public func startPushProvisioning(for cardId: Swift.String, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil)
}
public class UNACHCreditViewSettingsBuilder : UNComponents.UNACHCreditViewSettingsProtocol {
  public var fee: Swift.Double? {
    get
  }
  public var isAutoFocus: Swift.Bool {
    get
  }
  public var withPlaid: Swift.Bool {
    get
  }
  public var sameDay: Swift.Bool {
    get
  }
  public init(fee: Swift.Double? = nil, isAutoFocus: Swift.Bool = false, withPlaid: Swift.Bool = false, sameDay: Swift.Bool = false)
  public func fee(_ fee: Swift.Double) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func withPlaid(_ withPlaid: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  public func sameDay(_ sameDay: Swift.Bool) -> UNComponents.UNACHCreditViewSettingsBuilder
  @objc deinit
}
public typealias UNBookPaymentComponentCallbacks = (_ callback: UNComponents.UNBookPaymentComponentCallback) -> Swift.Void
public enum UNAccountMenuAction : Swift.String {
  case openAccountDetails
  case openAccountStatements
  case downloadBankVerificationLetter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UNACHCreditView : UIKit.UIView {
  var accountId: Swift.String { get set }
  var additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol { get set }
}
public protocol UNACHCreditViewSettingsProtocol {
  var fee: Swift.Double? { get }
  var isAutoFocus: Swift.Bool { get }
  var withPlaid: Swift.Bool { get }
  var sameDay: Swift.Bool { get }
}
public protocol UNACHDebitView : UIKit.UIView {
  var accountId: Swift.String { get set }
  var additionalSettings: UNComponents.UNACHDebitViewSettingsProtocol { get set }
}
public protocol UNACHDebitViewSettingsProtocol {
  var fee: Swift.Double? { get }
  var isAutoFocus: Swift.Bool { get }
  var sameDay: Swift.Bool { get }
}
public typealias UNAccountComponentCallbacks = (_ callback: UNComponents.UNAccountComponentCallback) -> Swift.Void
public typealias UNFonts = [UNComponents.UNFontFamilyName : [UNComponents.UNFontData]]
public typealias UNFontFamilyName = Swift.String
public struct UNFontData {
  public let fontWeight: UNComponents.FontWeight
  public let sources: [UNComponents.UNFontSource]
  public init(fontWeight: UNComponents.FontWeight, sources: [UNComponents.UNFontSource])
}
public struct UNFontSource {
  public let fileName: Swift.String
  public let format: Swift.String?
  public init(fileName: Swift.String, format: Swift.String? = nil)
}
public enum FontWeight {
  case thin
  case extraLight
  case light
  case regular
  case medium
  case semiBold
  case bold
  case extraBold
  case black
  public static func == (a: UNComponents.FontWeight, b: UNComponents.FontWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UNActivityComponentCallback {
  case unitOnLoad(result: Swift.Result<Swift.Void, UNComponents.UNError>)
}
@objc @_Concurrency.MainActor(unsafe) public class UNActivityComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(accountId: Swift.String?, additionalSettings: UNComponents.UNActivityViewSettingsProtocol, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNActivityComponentCallbacks?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UNComponents.UNActivityComponent : UNComponents.UNActivityView {
  @_Concurrency.MainActor(unsafe) public var accountId: Swift.String? {
    get
    set(newAccountId)
  }
}
public enum UNACHDebitComponentCallback {
  case onPaymentCreated(data: UNComponents.UNACHData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNACHDebitOnLoadResponse, UNComponents.UNError>)
}
public struct UNCardData : Swift.Codable {
  public let type: UNComponents.UNCardType
  public let id: Swift.String
  public let attributes: UNComponents.UNCardDetails
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNCardDetails : Swift.Codable {
  public let createdAt: Swift.String
  public let last4Digits: Swift.String
  public let expirationDate: Swift.String
  public let status: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UNCardType : Swift.String, Swift.Codable {
  case individualDebitCard
  case businessDebitCard
  case individualVirtualDebitCard
  case businessVirtualDebitCard
  public var isVirtual: Swift.Bool {
    get
  }
  public var typeDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol UNManagerProtocol : AnyObject {
  var customerToken: UNComponents.UNCustomerToken? { get set }
  var environment: UNComponents.UNEnvironment? { get set }
  var webVersioningStrategy: UNComponents.UNWebVersioningStrategy { get set }
  var ui: UNComponents.UNUI { get }
  var services: UNComponents.UNServices { get }
}
public protocol UNUIViews {
  func getCardComponent(id: Swift.String, additionalSettings: UNComponents.UNCardViewSettingsProtocol?, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNCardComponentCallbacks?) -> UNComponents.UNCardView
  func getACHCreditComponent(accountId: Swift.String, additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol?, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNACHCreditComponentCallbacks?) -> UNComponents.UNACHCreditView
  func getACHDebitComponent(accountId: Swift.String, additionalSettings: UNComponents.UNACHDebitViewSettingsProtocol?, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNACHDebitComponentCallbacks?) -> UNComponents.UNACHDebitView
  func getActivityComponent(accountId: Swift.String?, additionalSettings: UNComponents.UNActivityViewSettingsProtocol?, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNActivityComponentCallbacks?) -> UNComponents.UNActivityView
  func getAccountComponent(accountId: Swift.String?, additionalSettings: UNComponents.UNAccountViewSettingsProtocol?, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNAccountComponentCallbacks?) -> UNComponents.UNAccountView
  func getBookPaymentComponent(accountId: Swift.String, counterpartyAccountId: Swift.String, counterpartyName: Swift.String, isSameCustomer: Swift.Bool, additionalSettings: UNComponents.UNBookPaymentViewSettingsProtocol?, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNBookPaymentComponentCallbacks?) -> UNComponents.UNBookPaymentView
  func getCheckDepositComponent(accountId: Swift.String, fee: Swift.Double, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNCheckDepositComponentCallbacks?) -> UNComponents.UNCheckDepositView
}
extension UNComponents.UNUIViews {
  public func getCardComponent(id: Swift.String, additionalSettings: UNComponents.UNCardViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNCardComponentCallbacks? = nil) -> UNComponents.UNCardView
  public func getACHCreditComponent(accountId: Swift.String, additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNACHCreditComponentCallbacks? = nil) -> UNComponents.UNACHCreditView
  public func getACHDebitComponent(accountId: Swift.String, additionalSettings: UNComponents.UNACHDebitViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNACHDebitComponentCallbacks? = nil) -> UNComponents.UNACHDebitView
  public func getActivityComponent(accountId: Swift.String? = nil, additionalSettings: UNComponents.UNActivityViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNActivityComponentCallbacks? = nil) -> UNComponents.UNActivityView
  public func getAccountComponent(accountId: Swift.String? = nil, additionalSettings: UNComponents.UNAccountViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNAccountComponentCallbacks? = nil) -> UNComponents.UNAccountView
  public func getBookPaymentComponent(accountId: Swift.String, counterpartyAccountId: Swift.String, counterpartyName: Swift.String, isSameCustomer: Swift.Bool = false, additionalSettings: UNComponents.UNBookPaymentViewSettingsProtocol? = nil, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNBookPaymentComponentCallbacks? = nil) -> UNComponents.UNBookPaymentView
  public func getCheckDepositComponent(accountId: Swift.String, fee: Swift.Double, theme: UNComponents.UNTheme? = nil, language: UNComponents.UNLanguage? = nil, callbacks: UNComponents.UNCheckDepositComponentCallbacks? = nil) -> UNComponents.UNCheckDepositView
}
public class UNCardViewSettingsBuilder : UNComponents.UNCardViewSettingsProtocol {
  public var hideActionsMenuButton: Swift.Bool {
    get
  }
  public var hideCardTitle: Swift.Bool {
    get
  }
  public var hideSensitiveDataButton: Swift.Bool {
    get
  }
  public var enablePushProvisioning: Swift.Bool {
    get
  }
  public var learnMoreUrl: Swift.String {
    get
  }
  public init(hideActionsMenuButton: Swift.Bool = false, hideCardTitle: Swift.Bool = false, hideSensitiveDataButton: Swift.Bool = false, enablePushProvisioning: Swift.Bool = false, learnMoreUrl: Swift.String = "")
  public func hideActionsMenuButton(_ hideActionsMenuButton: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func hideCardTitle(_ hideCardTitle: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func hideSensitiveDataButton(_ hideSensitiveDataButton: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func enablePushProvisioning(_ enablePushProvisioning: Swift.Bool) -> UNComponents.UNCardViewSettingsBuilder
  public func learnMoreUrl(_ learnMoreUrl: Swift.String) -> UNComponents.UNCardViewSettingsBuilder
  @objc deinit
}
public enum UNCheckDepositComponentCallback {
  case unitCheckDepositCreated(data: UNComponents.UNCheckDepositData)
  case unitCheckDepositRestartRequest(data: UNComponents.UNCheckDepositData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNAccountData, UNComponents.UNError>)
}
public protocol UNCheckDepositView : UIKit.UIView {
  var accountId: Swift.String { get set }
  var fee: Swift.Double { get set }
}
public struct UNBookPaymentData : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public let details: UNComponents.UNBookPaymentAttributes
  public let relationships: UNComponents.UNBookPaymentRelationships
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNBookPaymentAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let status: UNComponents.UNPaymentStatus
  public let reason: Swift.String?
  public let direction: UNComponents.UNDirection
  public let description: Swift.String
  public let transactionSummaryOverride: Swift.String?
  public let amount: Swift.Int
  public let tags: UNComponents.UNTags?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNBookPaymentRelationships : Swift.Codable {
  public let account: UNComponents.UNRelationshipData?
  public let customer: UNComponents.UNRelationshipData?
  public let customers: UNComponents.UNRelationshipDataArray?
  public let counterpartyAccount: UNComponents.UNRelationshipData?
  public let counterpartyCustomer: UNComponents.UNRelationshipData?
  public let transaction: UNComponents.UNRelationshipData?
  public let recurringPayment: UNComponents.UNRelationshipData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UNPaymentStatus : Swift.String, Swift.Codable {
  case sent
  case rejected
  case pending
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNDirection : Swift.String, Swift.Codable {
  case debit
  case credit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNPaymentAccountType : Swift.String, Swift.Codable {
  case savings
  case checking
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNCounterpartyVerificationMethod : Swift.String, Swift.Codable {
  case plaid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNBookPaymentComponentCallback {
  case onPaymentCreated(data: UNComponents.UNBookPaymentData)
  case unitOnLoad(result: Swift.Result<UNComponents.UNAccountData, UNComponents.UNError>)
}
public struct UNVPError : Swift.Error {
  public let code: Swift.String
  public let description: Swift.String
  public let type: UNComponents.UNVPErrorType
  public let correlationId: Swift.String
  public init(code: Swift.String, description: Swift.String, type: UNComponents.UNVPErrorType, correlationId: Swift.String)
}
public enum UNVPErrorType {
  case emptyAppId
  case emptyEnvironment
  case deviceAuthenticationFailed
  case deviceRootDetection
  case emptyEncryptedPayload
  case invalidCardLast4Digits
  case noWallets
  case unsupportedCard
  case cancelledByUser
  case cancelledBySystem
  case passKitUnknown
  case unableToCreatePaymentPassView
  case validCertificatesNotFound
  case provisioningNotAllowed
  case networkFailure
  case sessionExpired
  case invalidCardInfo
  case payloadDecryptionFailed
  case apiError
  case navigationBarMissing
  case walletProvisioningError
  case walletProvisioningInconclusive
  case sdkLockout
  case invalidNonce
  public static func == (a: UNComponents.UNVPErrorType, b: UNComponents.UNVPErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UNVPProvisionStatus {
  case readyToProvision
  case alreadyProvisioned
  case provisionedInCurrentDevice
  case provisionedInPairedDevice
  case notAvailable
  public static func == (a: UNComponents.UNVPProvisionStatus, b: UNComponents.UNVPProvisionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UNVPSupportedWallet {
  public init(name: Swift.String, description: Swift.String, status: UNComponents.UNVPProvisionStatus, reason: UNComponents.UNVPReason)
}
public struct UNVPReason {
  public init(reason: Swift.String, description: Swift.String)
}
public struct UNVPCardProvisioningResponse {
  public init(walletStatus: UNComponents.UNVPProvisionStatus)
}
public class UNActivityViewSettingsBuilder : UNComponents.UNActivityViewSettingsProtocol {
  public var hideFilterButton: Swift.Bool {
    get
  }
  public init(hideFilterButton: Swift.Bool = false)
  public func hideFilterButton(_ hideFilterButton: Swift.Bool) -> UNComponents.UNActivityViewSettingsBuilder
  @objc deinit
}
public typealias UNActivityComponentCallbacks = (_ callback: UNComponents.UNActivityComponentCallback) -> Swift.Void
public struct UNAccountData : Swift.Codable {
  public let type: UNComponents.UNAccountType
  public let id: Swift.String
  public let attributes: UNComponents.UNAccountAttributes
  public let relationships: UNComponents.UNAccountRelationships
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UNAccountType : Swift.String, Swift.Codable {
  case depositAccount
  case batchAccount
  case creditAccount
  case orgLoanAccount
  case orgGeneralLedgerAccount
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UNAccountAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let updatedAt: Swift.String?
  public let name: Swift.String
  public let creditTerms: Swift.String?
  public let depositProduct: Swift.String?
  public let routingNumber: Swift.String?
  public let accountNumber: Swift.String?
  public let maskedAccountNumber: Swift.String?
  public let secondaryAccountNumber: UNComponents.UNSecondaryAccountNumber?
  public let creditLimit: Swift.Double?
  public let tags: UNComponents.UNTags
  public let balance: Swift.Double
  public let hold: Swift.Double
  public let reserve: Swift.Double?
  public let available: Swift.Double
  public let overdraftLimit: Swift.Double?
  public let currency: Swift.String
  public let status: UNComponents.UNAccountStatus
  public let closeReason: Swift.String?
  public let fraudReason: UNComponents.UNFraudReason?
  public let closeReasonText: Swift.String?
  public let freezeReason: Swift.String?
  public let isOverdrawnWithinLimit: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNSecondaryAccountNumber : Swift.Codable {
  public let routingNumber: Swift.String
  public let accountNumber: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNAccountRelationships : Swift.Codable {
  public let customer: UNComponents.UNRelationshipData?
  public let customers: UNComponents.UNRelationshipDataArray?
  public let org: UNComponents.UNRelationshipData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UNFraudReason : Swift.String, Swift.Codable {
  case achActivity
  case cardActivity
  case checkActivity
  case applicationHistory
  case accountActivity
  case clientIdentified
  case identityTheft
  case linkedToFraudulentCustomer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UNAccountStatus : Swift.String, Swift.Codable {
  case closed
  case open
  case frozen
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class UNBookPaymentViewSettingsBuilder : UNComponents.UNBookPaymentViewSettingsProtocol {
  public var isAutoFocus: Swift.Bool {
    get
  }
  public init(isAutoFocus: Swift.Bool = false)
  public func isAutoFocus(_ isAutoFocus: Swift.Bool) -> UNComponents.UNBookPaymentViewSettingsBuilder
  @objc deinit
}
public struct UNPlaidLinkTokenAttributes : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNVisaProviding {
  func initialize(completion: @escaping UNComponents.UNVisaInitializationCompletion)
  func getSupportedWallets(for payload: Swift.String, completion: @escaping UNComponents.UNVisaSupportedWalletsCompletion)
  func startCardProvisioning(for walletName: Swift.String, in vc: UIKit.UIViewController, completion: @escaping UNComponents.UNVisaCardProvisioningCompletion)
}
public typealias UNVisaInitializationCompletion = (_ signedNonce: Swift.String?, _ error: UNComponents.UNVPError?) -> Swift.Void
public typealias UNVisaSupportedWalletsCompletion = (_ wallets: [UNComponents.UNVPSupportedWallet]?, _ error: UNComponents.UNVPError?) -> Swift.Void
public typealias UNVisaCardProvisioningCompletion = (_ response: UNComponents.UNVPCardProvisioningResponse?, _ error: UNComponents.UNVPError?) -> Swift.Void
public typealias UNCustomerToken = Swift.String
public typealias UNTheme = Swift.String
public typealias UNLanguage = Swift.String
public protocol UNBookPaymentView : UIKit.UIView {
  var accountId: Swift.String { get set }
  var counterpartyName: Swift.String { get set }
  var counterpartyAccountId: Swift.String { get set }
  var isSameCustomer: Swift.Bool { get set }
  var additionalSetting: UNComponents.UNBookPaymentViewSettingsProtocol { get set }
}
public protocol UNBookPaymentViewSettingsProtocol {
  var isAutoFocus: Swift.Bool { get }
}
public typealias UNACHCreditComponentCallbacks = (_ callback: UNComponents.UNACHCreditComponentCallback) -> Swift.Void
public struct UNRelationshipData : Swift.Codable {
  public let data: UNComponents.UNData
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNRelationshipDataArray : Swift.Codable {
  public let data: [UNComponents.UNData]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNData : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNTags : Swift.Codable {
  public let dictionary: [Swift.String : Swift.String]
  public func encode(to encoder: Swift.Encoder)
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNAccountView : UIKit.UIView {
  var accountId: Swift.String? { get set }
  func openActionsMenu()
  func open(action: UNComponents.UNAccountMenuAction)
}
public protocol UNAccountViewSettingsProtocol {
  var hideActionsMenuButton: Swift.Bool { get }
  var hideSelectionMenuButton: Swift.Bool { get }
}
public enum UNEnvironment {
  case sandbox
  case production
  public static func == (a: UNComponents.UNEnvironment, b: UNComponents.UNEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias UNACHDebitComponentCallbacks = (_ callback: UNComponents.UNACHDebitComponentCallback) -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) public class UNACHCreditComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(accountId: Swift.String, additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol, theme: UNComponents.UNTheme?, language: UNComponents.UNLanguage?, callbacks: UNComponents.UNACHCreditComponentCallbacks?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UNComponents.UNACHCreditComponent : UNComponents.UNACHCreditView {
  @_Concurrency.MainActor(unsafe) public var accountId: Swift.String {
    get
    set(newAccountId)
  }
  @_Concurrency.MainActor(unsafe) public var additionalSettings: UNComponents.UNACHCreditViewSettingsProtocol {
    get
    set(newAdditionalSettings)
  }
}
public typealias UNCheckDepositComponentCallbacks = (_ callback: UNComponents.UNCheckDepositComponentCallback) -> Swift.Void
public struct UNComponentResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNComponentArrayResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNErrorResponse : Swift.Codable {
  public let status: Swift.String
  public let title: Swift.String
  public let detail: Swift.String?
  public let details: Swift.String?
  public let meta: UNComponents.UNErrorResponse.Meta?
  public struct Meta : Swift.Codable {
    public let supportId: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UNWebVersioningStrategy {
  case exact(major: Swift.Int, minor: Swift.Int, patch: Swift.Int)
  case upToNextMinor(major: Swift.Int, minor: Swift.Int)
  case upToNextMajor(major: Swift.Int)
}
public protocol UNUI {
  func setTheme(_ theme: UNComponents.UNTheme?)
  func setLanguage(_ language: UNComponents.UNLanguage?)
  func setFonts(_ fonts: UNComponents.UNFonts?)
  var views: UNComponents.UNUIViews { get }
  var flows: UNComponents.UNUIFlows { get }
  var theme: UNComponents.UNTheme? { get }
  var language: UNComponents.UNLanguage? { get }
  var fonts: UNComponents.UNFonts? { get }
}
@_hasMissingDesignatedInitializers public class UnitSDK {
  public static let manager: UNComponents.UNManagerProtocol
  @objc deinit
}
public struct UNCheckDepositData : Swift.Codable {
  public let type: Swift.String
  public let id: Swift.String
  public let attributes: UNComponents.UNCheckDepositAttributes
  public let relationships: UNComponents.UNCheckDepositRelationships
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNCheckDepositAttributes : Swift.Codable {
  public let createdAt: Swift.String
  public let status: UNComponents.UNCheckStatus
  public let reason: Swift.String?
  public let description: Swift.String
  public let amount: Swift.Float
  public let checkNumber: Swift.String?
  public let counterparty: UNComponents.UNCheckCounterparty?
  public let tags: UNComponents.UNTags?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UNCheckDepositRelationships : Swift.Codable {
  public let account: UNComponents.UNRelationshipData?
  public let customer: UNComponents.UNRelationshipData?
  public let customers: UNComponents.UNRelationshipDataArray?
  public let transaction: UNComponents.UNRelationshipData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol UNCardView : UIKit.UIView {
  var cardId: Swift.String { get set }
  var additionalSetting: UNComponents.UNCardViewSettingsProtocol { get set }
  func openActionsMenu()
  func open(action: UNComponents.UNCardMenuAction)
  func showSensitiveData()
  func hideSensitiveData()
}
public protocol UNCardViewSettingsProtocol {
  var hideActionsMenuButton: Swift.Bool { get }
  var hideCardTitle: Swift.Bool { get }
  var hideSensitiveDataButton: Swift.Bool { get }
  var enablePushProvisioning: Swift.Bool { get }
  var learnMoreUrl: Swift.String { get }
}
extension UNComponents.UNCardMenuAction : Swift.Equatable {}
extension UNComponents.UNCardMenuAction : Swift.Hashable {}
extension UNComponents.UNCardMenuAction : Swift.RawRepresentable {}
extension UNComponents.UNCheckStatus : Swift.Equatable {}
extension UNComponents.UNCheckStatus : Swift.Hashable {}
extension UNComponents.UNCheckStatus : Swift.RawRepresentable {}
extension UNComponents.UNAccountMenuAction : Swift.Equatable {}
extension UNComponents.UNAccountMenuAction : Swift.Hashable {}
extension UNComponents.UNAccountMenuAction : Swift.RawRepresentable {}
extension UNComponents.FontWeight : Swift.Equatable {}
extension UNComponents.FontWeight : Swift.Hashable {}
extension UNComponents.UNCardType : Swift.Equatable {}
extension UNComponents.UNCardType : Swift.Hashable {}
extension UNComponents.UNCardType : Swift.RawRepresentable {}
extension UNComponents.UNPaymentStatus : Swift.Equatable {}
extension UNComponents.UNPaymentStatus : Swift.Hashable {}
extension UNComponents.UNPaymentStatus : Swift.RawRepresentable {}
extension UNComponents.UNDirection : Swift.Equatable {}
extension UNComponents.UNDirection : Swift.Hashable {}
extension UNComponents.UNDirection : Swift.RawRepresentable {}
extension UNComponents.UNPaymentAccountType : Swift.Equatable {}
extension UNComponents.UNPaymentAccountType : Swift.Hashable {}
extension UNComponents.UNPaymentAccountType : Swift.RawRepresentable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.Equatable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.Hashable {}
extension UNComponents.UNCounterpartyVerificationMethod : Swift.RawRepresentable {}
extension UNComponents.UNVPErrorType : Swift.Equatable {}
extension UNComponents.UNVPErrorType : Swift.Hashable {}
extension UNComponents.UNVPProvisionStatus : Swift.Equatable {}
extension UNComponents.UNVPProvisionStatus : Swift.Hashable {}
extension UNComponents.UNAccountType : Swift.Equatable {}
extension UNComponents.UNAccountType : Swift.Hashable {}
extension UNComponents.UNAccountType : Swift.RawRepresentable {}
extension UNComponents.UNFraudReason : Swift.Equatable {}
extension UNComponents.UNFraudReason : Swift.Hashable {}
extension UNComponents.UNFraudReason : Swift.RawRepresentable {}
extension UNComponents.UNAccountStatus : Swift.Equatable {}
extension UNComponents.UNAccountStatus : Swift.Hashable {}
extension UNComponents.UNAccountStatus : Swift.RawRepresentable {}
extension UNComponents.UNEnvironment : Swift.Equatable {}
extension UNComponents.UNEnvironment : Swift.Hashable {}
